{
  "address": "0x1871A28A0336B7E974faa5c0880b832A2E257CcB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IZapHandler",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IZapHandler",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ImplementationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "from",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "contract IZapHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullAmountTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "pullTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IZapHandler",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceived",
          "type": "uint256"
        }
      ],
      "name": "zapERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94b22791661d2434ccf69a8e8bbdb615f0b30ca2c3e2c749fda64dc29518c504",
  "receipt": {
    "to": null,
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": "0x1871A28A0336B7E974faa5c0880b832A2E257CcB",
    "transactionIndex": 27,
    "gasUsed": "842354",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008200000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000410020002000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000010000000000000800000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000020001000000000008000000000000000000000000000000000000000040000100000",
    "blockHash": "0x380ba5ee1ec9cf151641a97a4febf24f11dcb32e9fd4036d804c961230b080a8",
    "transactionHash": "0x94b22791661d2434ccf69a8e8bbdb615f0b30ca2c3e2c749fda64dc29518c504",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 20008245,
        "transactionHash": "0x94b22791661d2434ccf69a8e8bbdb615f0b30ca2c3e2c749fda64dc29518c504",
        "address": "0x1871A28A0336B7E974faa5c0880b832A2E257CcB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x380ba5ee1ec9cf151641a97a4febf24f11dcb32e9fd4036d804c961230b080a8"
      },
      {
        "transactionIndex": 27,
        "blockNumber": 20008245,
        "transactionHash": "0x94b22791661d2434ccf69a8e8bbdb615f0b30ca2c3e2c749fda64dc29518c504",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000059c77eb85a9800000000000000000000000000000000000000000000000000197808d718bd6d6d000000000000000000000000000000000000000000005d035bd6181e1d38f0a3000000000000000000000000000000000000000000000000191e41586062d56d000000000000000000000000000000000000000000005d035c2fdf9cd59388a3",
        "logIndex": 124,
        "blockHash": "0x380ba5ee1ec9cf151641a97a4febf24f11dcb32e9fd4036d804c961230b080a8"
      }
    ],
    "blockNumber": 20008245,
    "cumulativeGasUsed": "4939065",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c271f0afa7a646b4a66756ecac278881",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IZapHandler\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IZapHandler\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"from\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract IZapHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullAmountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pullTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IZapHandler\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceived\",\"type\":\"uint256\"}],\"name\":\"zapERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPendingOwner(address)\":{\"details\":\"Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner.\"},\"transferOwnership()\":{\"details\":\"Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zap.sol\":\"Zap\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Zap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./dependencies/Ownable.sol\\\";\\nimport \\\"./interfaces/IZap.sol\\\";\\nimport \\\"./interfaces/IZapHandler.sol\\\";\\n\\n// reentrancy guards required? unlikely since it just cancels the previous zapping?\\ncontract Zap is Ownable, IZap {\\n    using SafeERC20 for IERC20;\\n    \\n    // The zap handler implementation takes care of \\n    IZapHandler public implementation;\\n    \\n    address public from = address(1); // from reverts to address(1) to save gas.\\n    IERC20 public pendingToken;\\n    uint256 public remaining = 1; // we set remaining to 1 as a gas optimization, terrible for readability but it iz what it iz\\n\\n    event ImplementationChanged(IZapHandler indexed oldImplementation, IZapHandler indexed newImplementation);\\n\\n    modifier nonReentrant() {\\n        require(from == address(1), \\\"!reentrancy\\\");\\n        _;\\n    }\\n\\n    // to parameter? yes.\\n    function zapERC20(IERC20 fromToken, IERC20 toToken, uint256 amount, uint256 minReceived) external nonReentrant override returns (uint256 received) {\\n        from = msg.sender;\\n        pendingToken = fromToken;\\n        remaining = amount + 1;\\n\\n        uint256 beforeBal = toToken.balanceOf(msg.sender);\\n        implementation.convertERC20(fromToken, toToken, msg.sender);\\n        from = address(1);\\n        \\n        uint256 receivedTokens = toToken.balanceOf(msg.sender) - beforeBal;\\n\\n        require(receivedTokens >= minReceived, \\\"!minimum not received\\\");\\n        // Unfortunately no event to save gas.\\n        return receivedTokens;\\n    }\\n    \\n    function pullTo(address to) external override {\\n        require(msg.sender == address(implementation), \\\"!implementation\\\");\\n        uint256 amount = remaining - 1;\\n        remaining = 1; // Safeguard that the implementation cannot overdraft\\n        pendingToken.safeTransferFrom(from, to, amount);\\n    }\\n\\n    function pullAmountTo(address to, uint256 amount) external override {\\n        require(msg.sender == address(implementation), \\\"!implementation\\\");\\n        require(remaining - amount >= 1, \\\"!overdraft\\\");\\n        unchecked {\\n            remaining -= amount; // Safeguard that the implementation cannot overdraft\\n        }\\n        pendingToken.safeTransferFrom(from, to, amount);\\n    }\\n\\n    function setImplementation(IZapHandler _implementation) external nonReentrant onlyOwner {\\n        IZapHandler oldImplementation = implementation;\\n        implementation = _implementation;\\n\\n        emit ImplementationChanged(oldImplementation, _implementation);\\n\\n    }\\n}\",\"keccak256\":\"0x571350f11e57b25346ac94b6c8e62aa89d5318dbbce9a60dce80ecc54f5b0019\",\"license\":\"MIT\"},\"contracts/dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Derived from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/1b27c13096d6e4389d62e7b0766a1db53fbb3f1b/contracts/access/Ownable.sol\\n// Adds pending owner\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address public pendingOwner;\\n\\n    event PendingOwnershipTransferred(address indexed previousPendingOwner, address indexed newPendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to the pendingOwner.\\n     * Can only be called by the pendingOwner.\\n     */\\n    function transferOwnership() public virtual {\\n        require(_msgSender() == pendingOwner, \\\"Ownable: caller is not the pendingOwner\\\");\\n        require(pendingOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Sets the pendingOwner, ownership is only transferred when they call transferOwnership.\\n     * Can only be called by the current owner.\\n     */\\n    function setPendingOwner(address newPendingOwner) external onlyOwner {\\n        address oldPendingOwner = pendingOwner;\\n        pendingOwner = newPendingOwner;\\n\\n        emit PendingOwnershipTransferred(oldPendingOwner, pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        pendingOwner = address(0);\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xfb9f03cd1f1d506e1e180bf5b086049c4820cc9cab2f970218d845d0ad592569\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZap {\\n\\n    function zapERC20(IERC20 fromToken, IERC20 toToken, uint256 amount, uint256 minReceived) external returns (uint256 received);\\n\\n    function pullTo(address to) external;\\n    function pullAmountTo(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0xdcd5e647fd171bb4ae669c94d0eb636c8b655cf190351f7f96738893edea2fd4\",\"license\":\"MIT\"},\"contracts/interfaces/IZapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZapHandler {\\n    function convertERC20(IERC20 fromToken, IERC20 toToken, address to) external;\\n}\",\"keccak256\":\"0x73a6172b6d19f1037cd02aea07ca52f08a981a5f0f10fa2a874f21196716856f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600380546001600160a01b031916600190811790915560055534801561002957600080fd5b5061003333610038565b610092565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610cf7806100a16000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c42069ec11610066578063c42069ec1461018a578063d5ce33891461019d578063d784d426146101b0578063e30c3978146101c357600080fd5b80638da5cb5b14610153578063ae1b6e1714610164578063ba447a1d1461017757600080fd5b80633adfd5a6146100d45780635188d10d146100e957806355234ec0146100fc5780635c60da1b14610118578063715018a614610143578063880ad0af1461014b575b600080fd5b6100e76100e2366004610aea565b6101d6565b005b6100e76100f7366004610b07565b610262565b61010560055481565b6040519081526020015b60405180910390f35b60025461012b906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6100e7610320565b6100e7610356565b6000546001600160a01b031661012b565b60045461012b906001600160a01b031681565b610105610185366004610b55565b610445565b6100e7610198366004610aea565b61069e565b60035461012b906001600160a01b031681565b6100e76101be366004610aea565b61071a565b60015461012b906001600160a01b031681565b6002546001600160a01b031633146102275760405162461bcd60e51b815260206004820152600f60248201526e10b4b6b83632b6b2b73a30ba34b7b760891b60448201526064015b60405180910390fd5b600060016005546102389190610c50565b600160055560035460045491925061025e916001600160a01b03908116911684846107df565b5050565b6002546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820152600f60248201526e10b4b6b83632b6b2b73a30ba34b7b760891b604482015260640161021e565b6001816005546102be9190610c50565b10156102f95760405162461bcd60e51b815260206004820152600a602482015269085bdd995c991c98599d60b21b604482015260640161021e565b60058054829003905560035460045461025e916001600160a01b03918216911684846107df565b6000546001600160a01b0316331461034a5760405162461bcd60e51b815260040161021e90610c03565b610354600061083f565b565b6001546001600160a01b0316336001600160a01b0316146103c95760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b606482015260840161021e565b6001546001600160a01b03166104305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021e565b600154610354906001600160a01b031661083f565b6003546000906001600160a01b03166001146104915760405162461bcd60e51b815260206004820152600b60248201526a217265656e7472616e637960a81b604482015260640161021e565b60038054336001600160a01b031991821617909155600480549091166001600160a01b0387161790556104c5836001610c38565b6005556040516370a0823160e01b81523360048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561050a57600080fd5b505afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190610b9b565b600254604051630b9214f960e01b81526001600160a01b0389811660048301528881166024830152336044830152929350911690630b9214f990606401600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b5050600380546001600160a01b031916600117905550506040516370a0823160e01b815233600482015260009082906001600160a01b038816906370a082319060240160206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190610b9b565b61064a9190610c50565b9050838110156106945760405162461bcd60e51b8152602060048201526015602482015274085b5a5b9a5b5d5b481b9bdd081c9958d95a5d9959605a1b604482015260640161021e565b9695505050505050565b6000546001600160a01b031633146106c85760405162461bcd60e51b815260040161021e90610c03565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b6003546001600160a01b03166001146107635760405162461bcd60e51b815260206004820152600b60248201526a217265656e7472616e637960a81b604482015260640161021e565b6000546001600160a01b0316331461078d5760405162461bcd60e51b815260040161021e90610c03565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fcfbf4028add9318bbf716f08c348595afb063b0e9feed1f86d33681a4b3ed4d390600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610839908590610899565b50505050565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006108ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109709092919063ffffffff16565b80519091501561096b578080602001905181019061090c9190610b33565b61096b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161021e565b505050565b606061097f8484600085610989565b90505b9392505050565b6060824710156109ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161021e565b843b610a385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021e565b600080866001600160a01b03168587604051610a549190610bb4565b60006040518083038185875af1925050503d8060008114610a91576040519150601f19603f3d011682016040523d82523d6000602084013e610a96565b606091505b5091509150610aa6828286610ab1565b979650505050505050565b60608315610ac0575081610982565b825115610ad05782518084602001fd5b8160405162461bcd60e51b815260040161021e9190610bd0565b600060208284031215610afc57600080fd5b813561098281610ca9565b60008060408385031215610b1a57600080fd5b8235610b2581610ca9565b946020939093013593505050565b600060208284031215610b4557600080fd5b8151801515811461098257600080fd5b60008060008060808587031215610b6b57600080fd5b8435610b7681610ca9565b93506020850135610b8681610ca9565b93969395505050506040820135916060013590565b600060208284031215610bad57600080fd5b5051919050565b60008251610bc6818460208701610c67565b9190910192915050565b6020815260008251806020840152610bef816040850160208701610c67565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610c4b57610c4b610c93565b500190565b600082821015610c6257610c62610c93565b500390565b60005b83811015610c82578181015183820152602001610c6a565b838111156108395750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610cbe57600080fd5b5056fea26469706673582212205368632daa15b3f94500bf574374d66e4b419eaed62cf04582e0de876ee657c664736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063c42069ec11610066578063c42069ec1461018a578063d5ce33891461019d578063d784d426146101b0578063e30c3978146101c357600080fd5b80638da5cb5b14610153578063ae1b6e1714610164578063ba447a1d1461017757600080fd5b80633adfd5a6146100d45780635188d10d146100e957806355234ec0146100fc5780635c60da1b14610118578063715018a614610143578063880ad0af1461014b575b600080fd5b6100e76100e2366004610aea565b6101d6565b005b6100e76100f7366004610b07565b610262565b61010560055481565b6040519081526020015b60405180910390f35b60025461012b906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6100e7610320565b6100e7610356565b6000546001600160a01b031661012b565b60045461012b906001600160a01b031681565b610105610185366004610b55565b610445565b6100e7610198366004610aea565b61069e565b60035461012b906001600160a01b031681565b6100e76101be366004610aea565b61071a565b60015461012b906001600160a01b031681565b6002546001600160a01b031633146102275760405162461bcd60e51b815260206004820152600f60248201526e10b4b6b83632b6b2b73a30ba34b7b760891b60448201526064015b60405180910390fd5b600060016005546102389190610c50565b600160055560035460045491925061025e916001600160a01b03908116911684846107df565b5050565b6002546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820152600f60248201526e10b4b6b83632b6b2b73a30ba34b7b760891b604482015260640161021e565b6001816005546102be9190610c50565b10156102f95760405162461bcd60e51b815260206004820152600a602482015269085bdd995c991c98599d60b21b604482015260640161021e565b60058054829003905560035460045461025e916001600160a01b03918216911684846107df565b6000546001600160a01b0316331461034a5760405162461bcd60e51b815260040161021e90610c03565b610354600061083f565b565b6001546001600160a01b0316336001600160a01b0316146103c95760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b606482015260840161021e565b6001546001600160a01b03166104305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021e565b600154610354906001600160a01b031661083f565b6003546000906001600160a01b03166001146104915760405162461bcd60e51b815260206004820152600b60248201526a217265656e7472616e637960a81b604482015260640161021e565b60038054336001600160a01b031991821617909155600480549091166001600160a01b0387161790556104c5836001610c38565b6005556040516370a0823160e01b81523360048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561050a57600080fd5b505afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190610b9b565b600254604051630b9214f960e01b81526001600160a01b0389811660048301528881166024830152336044830152929350911690630b9214f990606401600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b5050600380546001600160a01b031916600117905550506040516370a0823160e01b815233600482015260009082906001600160a01b038816906370a082319060240160206040518083038186803b15801561060857600080fd5b505afa15801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190610b9b565b61064a9190610c50565b9050838110156106945760405162461bcd60e51b8152602060048201526015602482015274085b5a5b9a5b5d5b481b9bdd081c9958d95a5d9959605a1b604482015260640161021e565b9695505050505050565b6000546001600160a01b031633146106c85760405162461bcd60e51b815260040161021e90610c03565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b6003546001600160a01b03166001146107635760405162461bcd60e51b815260206004820152600b60248201526a217265656e7472616e637960a81b604482015260640161021e565b6000546001600160a01b0316331461078d5760405162461bcd60e51b815260040161021e90610c03565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fcfbf4028add9318bbf716f08c348595afb063b0e9feed1f86d33681a4b3ed4d390600090a35050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610839908590610899565b50505050565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006108ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109709092919063ffffffff16565b80519091501561096b578080602001905181019061090c9190610b33565b61096b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161021e565b505050565b606061097f8484600085610989565b90505b9392505050565b6060824710156109ea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161021e565b843b610a385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021e565b600080866001600160a01b03168587604051610a549190610bb4565b60006040518083038185875af1925050503d8060008114610a91576040519150601f19603f3d011682016040523d82523d6000602084013e610a96565b606091505b5091509150610aa6828286610ab1565b979650505050505050565b60608315610ac0575081610982565b825115610ad05782518084602001fd5b8160405162461bcd60e51b815260040161021e9190610bd0565b600060208284031215610afc57600080fd5b813561098281610ca9565b60008060408385031215610b1a57600080fd5b8235610b2581610ca9565b946020939093013593505050565b600060208284031215610b4557600080fd5b8151801515811461098257600080fd5b60008060008060808587031215610b6b57600080fd5b8435610b7681610ca9565b93506020850135610b8681610ca9565b93969395505050506040820135916060013590565b600060208284031215610bad57600080fd5b5051919050565b60008251610bc6818460208701610c67565b9190910192915050565b6020815260008251806020840152610bef816040850160208701610c67565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610c4b57610c4b610c93565b500190565b600082821015610c6257610c62610c93565b500390565b60005b83811015610c82578181015183820152602001610c6a565b838111156108395750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610cbe57600080fd5b5056fea26469706673582212205368632daa15b3f94500bf574374d66e4b419eaed62cf04582e0de876ee657c664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPendingOwner(address)": {
        "details": "Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner."
      },
      "transferOwnership()": {
        "details": "Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3274,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3276,
        "contract": "contracts/Zap.sol:Zap",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2152,
        "contract": "contracts/Zap.sol:Zap",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IZapHandler)3458"
      },
      {
        "astId": 2158,
        "contract": "contracts/Zap.sol:Zap",
        "label": "from",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2161,
        "contract": "contracts/Zap.sol:Zap",
        "label": "pendingToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 2164,
        "contract": "contracts/Zap.sol:Zap",
        "label": "remaining",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IZapHandler)3458": {
        "encoding": "inplace",
        "label": "contract IZapHandler",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}