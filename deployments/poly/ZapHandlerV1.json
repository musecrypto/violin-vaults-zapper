{
  "address": "0xce529d6b93ad13d938B08ddDAA7Bc90374C5785c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "FactoryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "alreadyExists",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "name": "FactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "alreadyExists",
          "type": "bool"
        }
      ],
      "name": "RouteAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "convertERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "factories",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "removeFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "routeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "inputRoute",
          "type": "address[]"
        }
      ],
      "name": "setRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c25d280d968ab0ea402d78f7677a882073693c20b1d14ef52fc3273ac51d1a3",
  "receipt": {
    "to": null,
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": "0xce529d6b93ad13d938B08ddDAA7Bc90374C5785c",
    "transactionIndex": 14,
    "gasUsed": "1882985",
    "logsBloom": "0x
    "blockHash": "0x91d1b6552d7b8cf309ecdb1ef2da5722703169c41a10c4ceeec93a67f227536e",
    "transactionHash": "0x9c25d280d968ab0ea402d78f7677a882073693c20b1d14ef52fc3273ac51d1a3",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 20008241,
        "transactionHash": "0x9c25d280d968ab0ea402d78f7677a882073693c20b1d14ef52fc3273ac51d1a3",
        "address": "0xce529d6b93ad13d938B08ddDAA7Bc90374C5785c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x91d1b6552d7b8cf309ecdb1ef2da5722703169c41a10c4ceeec93a67f227536e"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 20008241,
        "transactionHash": "0x9c25d280d968ab0ea402d78f7677a882073693c20b1d14ef52fc3273ac51d1a3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000c8b0f249458c000000000000000000000000000000000000000000000000001a40b9c96202f96d000000000000000000000000000000000000000000005d034d08477ae858cfd0000000000000000000000000000000000000000000000000197808d718bd6d6d000000000000000000000000000000000000000000005d034dd0f86d319e5bd0",
        "logIndex": 77,
        "blockHash": "0x91d1b6552d7b8cf309ecdb1ef2da5722703169c41a10c4ceeec93a67f227536e"
      }
    ],
    "blockNumber": 20008241,
    "cumulativeGasUsed": "5435099",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c271f0afa7a646b4a66756ecac278881",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"FactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"name\":\"FactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"}],\"name\":\"RouteAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"convertERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"routeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"inputRoute\",\"type\":\"address[]\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPendingOwner(address)\":{\"details\":\"Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner.\"},\"transferOwnership()\":{\"details\":\"Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZapHandlerV1.sol\":\"ZapHandlerV1\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/ZapHandlerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./dependencies/Ownable.sol\\\";\\nimport \\\"./interfaces/IZap.sol\\\";\\nimport \\\"./interfaces/IZapHandler.sol\\\";\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract ZapHandlerV1 is Ownable, IZapHandler, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    struct Factory {\\n        address factory;\\n        uint32 amountsOutNominator;\\n        uint32 amountsOutDenominator;\\n    }\\n\\n    struct RouteStep {\\n        IERC20 from;\\n        IERC20 to;\\n        IUniswapV2Pair pair;\\n        uint32 amountsOutNominator;\\n        uint32 amountsOutDenominator;\\n    }\\n\\n    EnumerableSet.AddressSet factorySet;\\n    mapping(address => Factory) public factories;\\n\\n    // Example route: token0, factory, intermediary factory token1, factory == 0 signals using existing routing.\\n    // mapping(IERC20 => mapping(IERC20 => address[])) public routes;\\n\\n    mapping(IERC20 => mapping(IERC20 => RouteStep[])) public routes;\\n\\n    event FactorySet(\\n        address indexed factory,\\n        bool indexed alreadyExists,\\n        uint32 amountsOutNominator,\\n        uint32 amountsOutDenominator\\n    );\\n    event FactoryRemoved(address indexed factory);\\n    event RouteAdded(\\n        IERC20 indexed from,\\n        IERC20 indexed to,\\n        bool indexed alreadyExists\\n    );\\n\\n    function setFactory(\\n        address factory,\\n        uint32 amountsOutNominator,\\n        uint32 amountsOutDenominator\\n    ) external onlyOwner {\\n        require(amountsOutDenominator >= amountsOutNominator, \\\"!nom > denom\\\");\\n        require(amountsOutNominator != 0, \\\"!zero\\\");\\n        assert(amountsOutNominator != 0);\\n        require(factory != address(0), \\\"!zero factory\\\"); // reserved for subroutes\\n        bool alreadyExists = factorySet.contains(factory); // for event\\n\\n        factories[factory] = Factory({\\n            factory: factory,\\n            amountsOutNominator: amountsOutNominator,\\n            amountsOutDenominator: amountsOutDenominator\\n        });\\n        factorySet.add(factory);\\n\\n        emit FactorySet(\\n            factory,\\n            alreadyExists,\\n            amountsOutNominator,\\n            amountsOutDenominator\\n        );\\n    }\\n\\n    function removeFactory(address factory) external onlyOwner {\\n        require(factorySet.contains(factory), \\\"!exists\\\");\\n        factorySet.remove(factory);\\n        delete factories[factory];\\n\\n        emit FactoryRemoved(factory);\\n    }\\n\\n    function setRoute(\\n        IERC20 from,\\n        IERC20 to,\\n        address[] memory inputRoute\\n    ) external onlyOwner {\\n        bool alreadyExists = routes[from][to].length > 0;\\n\\n        generateRoute(from, to, inputRoute);\\n        emit RouteAdded(from, to, alreadyExists);\\n\\n        generateInvertedRoute(from, to);\\n        emit RouteAdded(to, from, alreadyExists);\\n    }\\n\\n    function convertERC20(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient\\n    ) external override {\\n        RouteStep memory lastStep = handleRoute(\\n            getFromZapperStep(),\\n            fromToken,\\n            toToken\\n        );\\n        handleSwap(lastStep, recipient);\\n    }\\n\\n    // returns lastPair to take out\\n    function handleRoute(\\n        RouteStep memory previousStep,\\n        IERC20 from,\\n        IERC20 to\\n    ) internal returns (RouteStep memory lastStep) {\\n        RouteStep[] memory route = routes[from][to];\\n        if (route.length == 0) {\\n            revert(\\n                \\\"Route length zero, TODO: generate new route automatically.\\\"\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < route.length; i++) {\\n            RouteStep memory step = route[i];\\n            // Zero pair indicates nested routing.\\n            if (address(step.pair) == address(0)) {\\n                previousStep = handleRoute(previousStep, step.from, step.to);\\n            } else {\\n                handleSwap(previousStep, address(step.pair));\\n                previousStep = step;\\n            }\\n        }\\n        return previousStep;\\n    }\\n    // slightly more gas optimal then the shorter version \\n    function handleSwap(RouteStep memory step, address recipient) internal {\\n        if (address(step.to) == address(0)) {\\n            IZap(msg.sender).pullTo(recipient);\\n        } else {\\n            if (address(step.from) < address(step.to)) {\\n                (uint256 reserveIn, uint256 reserveOut, ) = step\\n                    .pair\\n                    .getReserves();\\n                uint256 amountIn = step.from.balanceOf(address(step.pair)) -\\n                    reserveIn;\\n                uint256 amountOut = getAmountOut(\\n                    amountIn,\\n                    reserveIn,\\n                    reserveOut,\\n                    step.amountsOutNominator,\\n                    step.amountsOutDenominator\\n                );\\n                step.pair.swap(0, amountOut, recipient, \\\"\\\");\\n            } else {\\n                (uint256 reserveOut, uint256 reserveIn, ) = step\\n                    .pair\\n                    .getReserves();\\n                uint256 amountIn = step.from.balanceOf(address(step.pair)) -\\n                    reserveIn;\\n                uint256 amountOut = getAmountOut(\\n                    amountIn,\\n                    reserveIn,\\n                    reserveOut,\\n                    step.amountsOutNominator,\\n                    step.amountsOutDenominator\\n                );\\n                step.pair.swap(amountOut, 0, recipient, \\\"\\\");\\n            }\\n        }\\n    }\\n\\n    //** ROUTE GENERATION **/\\n\\n    function generateRoute(\\n        IERC20 token0,\\n        IERC20 token1,\\n        address[] memory route\\n    ) internal {\\n        require(route.length >= 3, \\\"!route too short\\\");\\n        require(route.length % 2 == 1, \\\"!route has even length\\\");\\n        require(route[0] == address(token0), \\\"!token0 not route beginning\\\");\\n        require(\\n            route[route.length - 1] == address(token1),\\n            \\\"!token1 not route ending\\\"\\n        );\\n        delete routes[token0][token1];\\n\\n        IERC20 from = IERC20(route[0]);\\n        from.balanceOf(address(this)); // validate from\\n\\n        for (uint256 i = 1; i < route.length; i += 2) {\\n            address factory = route[i];\\n            IERC20 to = IERC20(route[i + 1]);\\n            if (factory == address(0)) {\\n                require(routes[from][to].length > 0, \\\"subroute does not exist\\\");\\n                routes[token0][token1].push(\\n                    RouteStep({\\n                        from: from,\\n                        pair: IUniswapV2Pair(address(0)),\\n                        to: to,\\n                        amountsOutNominator: 0,\\n                        amountsOutDenominator: 0\\n                    })\\n                );\\n            } else {\\n                require(\\n                    factorySet.contains(factory),\\n                    \\\"!factory does not exist\\\"\\n                );\\n                address pairAddress = IUniswapV2Factory(factory).getPair(\\n                    address(from),\\n                    address(to)\\n                );\\n                require(pairAddress != address(0), \\\"pair does not exist\\\");\\n                routes[token0][token1].push(\\n                    RouteStep({\\n                        from: from,\\n                        pair: IUniswapV2Pair(pairAddress),\\n                        to: to,\\n                        amountsOutNominator: factories[factory]\\n                            .amountsOutNominator,\\n                        amountsOutDenominator: factories[factory]\\n                            .amountsOutDenominator\\n                    })\\n                );\\n            }\\n\\n            from = to;\\n        }\\n    }\\n\\n    function generateInvertedRoute(IERC20 from, IERC20 to) internal {\\n        delete routes[to][from];\\n        uint256 length = routes[from][to].length;\\n        uint256 index;\\n        RouteStep memory step;\\n        for (uint256 i = 0; i < length; i++) {\\n            index = length - 1 - i;\\n            step = routes[from][to][index];\\n            routes[to][from].push(\\n                RouteStep({\\n                    from: step.to,\\n                    pair: step.pair,\\n                    to: step.from,\\n                    amountsOutNominator: step.amountsOutNominator,\\n                    amountsOutDenominator: step.amountsOutDenominator\\n                })\\n            );\\n        }\\n    }\\n\\n    //** UTILITIES **/\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeNom,\\n        uint256 feeDenom\\n    ) internal pure returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * feeNom;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * feeDenom + amountInWithFee;\\n        unchecked {\\n            return denominator == 0 ? 0 : numerator / denominator;\\n        }\\n    }\\n\\n    function getFromZapperStep() internal pure returns (RouteStep memory) {\\n        RouteStep memory fromZapper;\\n        return fromZapper;\\n    }\\n\\n    function getFactory(uint256 index) external view returns (address) {\\n        return factorySet.at(index);\\n    }\\n\\n    function factoryLength() external view returns (uint256) {\\n        return factorySet.length();\\n    }\\n\\n    function routeLength(IERC20 token0, IERC20 token1)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return routes[token0][token1].length;\\n    }\\n}\\n\",\"keccak256\":\"0xbb1126d8b33816de584f87fd9466117782b5e715fbccecbc4f588f83ef902841\",\"license\":\"MIT\"},\"contracts/dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Derived from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/1b27c13096d6e4389d62e7b0766a1db53fbb3f1b/contracts/access/Ownable.sol\\n// Adds pending owner\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address public pendingOwner;\\n\\n    event PendingOwnershipTransferred(address indexed previousPendingOwner, address indexed newPendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to the pendingOwner.\\n     * Can only be called by the pendingOwner.\\n     */\\n    function transferOwnership() public virtual {\\n        require(_msgSender() == pendingOwner, \\\"Ownable: caller is not the pendingOwner\\\");\\n        require(pendingOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Sets the pendingOwner, ownership is only transferred when they call transferOwnership.\\n     * Can only be called by the current owner.\\n     */\\n    function setPendingOwner(address newPendingOwner) external onlyOwner {\\n        address oldPendingOwner = pendingOwner;\\n        pendingOwner = newPendingOwner;\\n\\n        emit PendingOwnershipTransferred(oldPendingOwner, pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        pendingOwner = address(0);\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xfb9f03cd1f1d506e1e180bf5b086049c4820cc9cab2f970218d845d0ad592569\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZap {\\n\\n    function zapERC20(IERC20 fromToken, IERC20 toToken, uint256 amount, uint256 minReceived) external returns (uint256 received);\\n\\n    function pullTo(address to) external;\\n    function pullAmountTo(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0xdcd5e647fd171bb4ae669c94d0eb636c8b655cf190351f7f96738893edea2fd4\",\"license\":\"MIT\"},\"contracts/interfaces/IZapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZapHandler {\\n    function convertERC20(IERC20 fromToken, IERC20 toToken, address to) external;\\n}\",\"keccak256\":\"0x73a6172b6d19f1037cd02aea07ca52f08a981a5f0f10fa2a874f21196716856f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610024565b600160025561007e565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6120368061008d6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806363c6edfa1161008c5780638da5cb5b116100665780638da5cb5b14610220578063c42069ec14610231578063e30c397814610244578063fab526891461025757600080fd5b806363c6edfa146101d7578063715018a614610210578063880ad0af1461021857600080fd5b80634b37c73f116100c85780634b37c73f1461013257806355a204f9146101455780635cadd6d114610170578063600c557d1461018357600080fd5b80630b9214f9146100ef5780632634092614610104578063470f498514610117575b600080fd5b6101026100fd366004611cb3565b6102c5565b005b610102610112366004611cf3565b6102eb565b61011f6103e7565b6040519081526020015b60405180910390f35b610102610140366004611bf5565b6103f8565b610158610153366004611e63565b6104be565b6040516001600160a01b039091168152602001610129565b61010261017e366004611c2f565b6104d1565b610196610191366004611de6565b6106cc565b604080516001600160a01b0396871681529486166020860152929094169183019190915263ffffffff9081166060830152909116608082015260a001610129565b61011f6101e5366004611c7a565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b610102610741565b610102610777565b6000546001600160a01b0316610158565b61010261023f366004611bf5565b610866565b600154610158906001600160a01b031681565b610299610265366004611bf5565b6005602052600090815260409020546001600160a01b0381169063ffffffff600160a01b8204811691600160c01b90041683565b604080516001600160a01b03909416845263ffffffff9283166020850152911690820152606001610129565b60006102d96102d26108e2565b85856108f7565b90506102e58183610ad0565b50505050565b6000546001600160a01b0316331461031e5760405162461bcd60e51b815260040161031590611e95565b60405180910390fd5b6001600160a01b038084166000908152600660209081526040808320938616835292905220541515610351848484610ed5565b801515836001600160a01b0316856001600160a01b03167f4543854d4a9097d1b702bd5734d0a5a2834070931096c2a7a0d326bb34f71e5660405160405180910390a461039e8484611545565b801515846001600160a01b0316846001600160a01b03167f4543854d4a9097d1b702bd5734d0a5a2834070931096c2a7a0d326bb34f71e5660405160405180910390a450505050565b60006103f360036118b3565b905090565b6000546001600160a01b031633146104225760405162461bcd60e51b815260040161031590611e95565b61042d6003826118bd565b6104635760405162461bcd60e51b81526020600482015260076024820152662165786973747360c81b6044820152606401610315565b61046e6003826118e2565b506001600160a01b03811660008181526005602052604080822080546001600160e01b0319169055517fafa2737b2090fa39c66b7348625f0c03726240f724defbc6216d679506f944419190a250565b60006104cb6003836118f7565b92915050565b6000546001600160a01b031633146104fb5760405162461bcd60e51b815260040161031590611e95565b8163ffffffff168163ffffffff1610156105465760405162461bcd60e51b815260206004820152600c60248201526b216e6f6d203e2064656e6f6d60a01b6044820152606401610315565b63ffffffff82166105815760405162461bcd60e51b8152602060048201526005602482015264217a65726f60d81b6044820152606401610315565b63ffffffff821661059457610594611f55565b6001600160a01b0383166105da5760405162461bcd60e51b815260206004820152600d60248201526c217a65726f20666163746f727960981b6044820152606401610315565b60006105e76003856118bd565b604080516060810182526001600160a01b0380881680835263ffffffff8089166020808601918252898316868801908152600094855260059091529590922093518454925195518216600160c01b0263ffffffff60c01b19968316600160a01b026001600160c01b03199094169190941617919091179390931617905590915061067690600390869061190316565b506040805163ffffffff808616825284166020820152821515916001600160a01b038716917f371529b40bbd6a0fdc00ffa2f65512b7ba6152f0c2111608704538c5491c9147910160405180910390a350505050565b600660205282600052604060002060205281600052604060002081815481106106f457600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03918216955091811693508116915063ffffffff600160a01b8204811691600160c01b90041685565b6000546001600160a01b0316331461076b5760405162461bcd60e51b815260040161031590611e95565b6107756000611918565b565b6001546001600160a01b0316336001600160a01b0316146107ea5760405162461bcd60e51b815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e64696044820152663733a7bbb732b960c91b6064820152608401610315565b6001546001600160a01b03166108515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610315565b600154610775906001600160a01b0316611918565b6000546001600160a01b031633146108905760405162461bcd60e51b815260040161031590611e95565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b6108ea611b3f565b6108f2611b3f565b919050565b6108ff611b3f565b6001600160a01b038084166000908152600660209081526040808320938616835292815282822080548451818402810184019095528085529293929091849084015b828210156109c05760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548216858701526002909201549081169284019290925263ffffffff600160a01b830481166060850152600160c01b90920490911660808301529083529092019101610941565b505050509050805160001415610a3e5760405162461bcd60e51b815260206004820152603a60248201527f526f757465206c656e677468207a65726f2c20544f444f3a2067656e6572617460448201527f65206e657720726f757465206175746f6d61746963616c6c792e0000000000006064820152608401610315565b60005b8151811015610ac6576000828281518110610a5e57610a5e611fad565b6020026020010151905060006001600160a01b031681604001516001600160a01b03161415610aa157610a9a87826000015183602001516108f7565b9650610ab3565b610aaf878260400151610ad0565b8096505b5080610abe81611f18565b915050610a41565b5093949350505050565b60208201516001600160a01b0316610b3f57604051631d6fead360e11b81526001600160a01b03821660048201523390633adfd5a690602401600060405180830381600087803b158015610b2357600080fd5b505af1158015610b37573d6000803e3d6000fd5b505050505050565b81602001516001600160a01b031682600001516001600160a01b03161015610d2b5760008083604001516001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610ba157600080fd5b505afa158015610bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd99190611e27565b50855160408088015190516370a0823160e01b81526001600160a01b0391821660048201526001600160701b03948516965092909316935060009285929116906370a082319060240160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190611e7c565b610c7c9190611f01565b90506000610ca1828585896060015163ffffffff168a6080015163ffffffff16611972565b604080880151905163022c0d9f60e01b8152600060048201819052602482018490526001600160a01b03898116604484015260806064840152608483019190915292935091169063022c0d9f9060a401600060405180830381600087803b158015610d0b57600080fd5b505af1158015610d1f573d6000803e3d6000fd5b50505050505050505050565b60008083604001516001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da39190611e27565b50855160408088015190516370a0823160e01b81526001600160a01b0391821660048201526001600160701b03948516965092909316935060009284929116906370a082319060240160206040518083038186803b158015610e0457600080fd5b505afa158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190611e7c565b610e469190611f01565b90506000610e6b828486896060015163ffffffff168a6080015163ffffffff16611972565b604080880151905163022c0d9f60e01b8152600481018390526000602482018190526001600160a01b03898116604484015260806064840152608483019190915292935091169063022c0d9f9060a401600060405180830381600087803b158015610d0b57600080fd5b600381511015610f1a5760405162461bcd60e51b815260206004820152601060248201526f085c9bdd5d19481d1bdbc81cda1bdc9d60821b6044820152606401610315565b60028151610f289190611f33565b600114610f705760405162461bcd60e51b8152602060048201526016602482015275042e4deeae8ca40d0c2e640caeccadc40d8cadccee8d60531b6044820152606401610315565b826001600160a01b031681600081518110610f8d57610f8d611fad565b60200260200101516001600160a01b031614610feb5760405162461bcd60e51b815260206004820152601b60248201527f21746f6b656e30206e6f7420726f75746520626567696e6e696e6700000000006044820152606401610315565b816001600160a01b031681600183516110049190611f01565b8151811061101457611014611fad565b60200260200101516001600160a01b0316146110725760405162461bcd60e51b815260206004820152601860248201527f21746f6b656e31206e6f7420726f75746520656e64696e6700000000000000006044820152606401610315565b6001600160a01b03808416600090815260066020908152604080832093861683529290529081206110a291611b6d565b6000816000815181106110b7576110b7611fad565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b15801561110457600080fd5b505afa158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190611e7c565b5060015b825181101561153e57600083828151811061115d5761115d611fad565b602002602001015190506000848360016111779190611eca565b8151811061118757611187611fad565b6020026020010151905060006001600160a01b0316826001600160a01b03161415611301576001600160a01b0380851660009081526006602090815260408083209385168352929052205461121e5760405162461bcd60e51b815260206004820152601760248201527f737562726f75746520646f6573206e6f742065786973740000000000000000006044820152606401610315565b6001600160a01b0387811660009081526006602090815260408083208a851684528252808320815160a08101835289861681528686168185019081529281018581526060820186815260808301878152845460018082018755958952969097209251600390960290920180546001600160a01b03199081169689169690961781559351928401805490951692871692909217909355516002909101805492519351919094166001600160c01b031990921691909117600160a01b63ffffffff938416021763ffffffff60c01b1916600160c01b9290911691909102179055611528565b61130c6003836118bd565b6113585760405162461bcd60e51b815260206004820152601760248201527f21666163746f727920646f6573206e6f742065786973740000000000000000006044820152606401610315565b60405163e6a4390560e01b81526001600160a01b03858116600483015282811660248301526000919084169063e6a439059060440160206040518083038186803b1580156113a557600080fd5b505afa1580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd9190611c12565b90506001600160a01b03811661142b5760405162461bcd60e51b81526020600482015260136024820152721c185a5c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610315565b6001600160a01b0380891660009081526006602090815260408083208b851684528252808320815160a0810183528a86168152878616818501908152968616818401908152898716865260058086529386205463ffffffff600160a01b808304821660608601908152968852600160c01b92839004821660808601908152865460018181018955978b5298909920945160039098029094018054978a166001600160a01b03199889161781559951948a018054958a169590971694909417909555516002909701805493519551831690940263ffffffff60c01b1995909216026001600160c01b0319909216959094169490941793909317161790555b92506115379050600282611eca565b9050611140565b5050505050565b6001600160a01b038082166000908152600660209081526040808320938616835292905290812061157591611b6d565b6001600160a01b038083166000908152600660209081526040808320938516835292905290812054906115a6611b3f565b60005b83811015610b3757806115bd600186611f01565b6115c79190611f01565b6001600160a01b038088166000908152600660209081526040808320938a168352929052208054919450908490811061160257611602611fad565b90600052602060002090600302016040518060a00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160189054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050915060066000866001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b031681526020019081526020016000206040518060a0016040528084602001516001600160a01b0316815260200184600001516001600160a01b0316815260200184604001516001600160a01b03168152602001846060015163ffffffff168152602001846080015163ffffffff16815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff160217905550505080806118ab90611f18565b9150506115a9565b60006104cb825490565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006118db836001600160a01b0384166119d3565b60006118db8383611ac6565b60006118db836001600160a01b038416611af0565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008061197f8488611ee2565b9050600061198d8683611ee2565b905060008261199c868a611ee2565b6119a69190611eca565b905080156119c3578082816119bd576119bd611f81565b046119c6565b60005b9998505050505050505050565b60008181526001830160205260408120548015611abc5760006119f7600183611f01565b8554909150600090611a0b90600190611f01565b9050818114611a70576000866000018281548110611a2b57611a2b611fad565b9060005260206000200154905080876000018481548110611a4e57611a4e611fad565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a8157611a81611f97565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104cb565b60009150506104cb565b6000826000018281548110611add57611add611fad565b9060005260206000200154905092915050565b6000818152600183016020526040812054611b37575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104cb565b5060006104cb565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b5080546000825560030290600052602060002090810190611b8e9190611b91565b50565b5b80821115611bcf5780546001600160a01b0319908116825560018201805490911690556002810180546001600160e01b0319169055600301611b92565b5090565b80356108f281611fd9565b80516001600160701b03811681146108f257600080fd5b600060208284031215611c0757600080fd5b81356118db81611fd9565b600060208284031215611c2457600080fd5b81516118db81611fd9565b600080600060608486031215611c4457600080fd5b8335611c4f81611fd9565b92506020840135611c5f81611fee565b91506040840135611c6f81611fee565b809150509250925092565b60008060408385031215611c8d57600080fd5b8235611c9881611fd9565b91506020830135611ca881611fd9565b809150509250929050565b600080600060608486031215611cc857600080fd5b8335611cd381611fd9565b92506020840135611ce381611fd9565b91506040840135611c6f81611fd9565b600080600060608486031215611d0857600080fd5b8335611d1381611fd9565b9250602084810135611d2481611fd9565b9250604085013567ffffffffffffffff80821115611d4157600080fd5b818701915087601f830112611d5557600080fd5b813581811115611d6757611d67611fc3565b8060051b604051601f19603f83011681018181108582111715611d8c57611d8c611fc3565b604052828152858101935084860182860187018c1015611dab57600080fd5b600095505b83861015611dd557611dc181611bd3565b855260019590950194938601938601611db0565b508096505050505050509250925092565b600080600060608486031215611dfb57600080fd5b8335611e0681611fd9565b92506020840135611e1681611fd9565b929592945050506040919091013590565b600080600060608486031215611e3c57600080fd5b611e4584611bde565b9250611e5360208501611bde565b91506040840151611c6f81611fee565b600060208284031215611e7557600080fd5b5035919050565b600060208284031215611e8e57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611edd57611edd611f6b565b500190565b6000816000190483118215151615611efc57611efc611f6b565b500290565b600082821015611f1357611f13611f6b565b500390565b6000600019821415611f2c57611f2c611f6b565b5060010190565b600082611f5057634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611b8e57600080fd5b63ffffffff81168114611b8e57600080fdfea264697066735822122015955a480205cfd53f173eb071dfad9077c152a7a0832b67c4177dceff37282c64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPendingOwner(address)": {
        "details": "Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner."
      },
      "transferOwnership()": {
        "details": "Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3274,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3276,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2415,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "factorySet",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)1543_storage"
      },
      {
        "astId": 2420,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "factories",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Factory)2398_storage)"
      },
      {
        "astId": 2430,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "routes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IERC20)663,t_mapping(t_contract(IERC20)663,t_array(t_struct(RouteStep)2412_storage)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RouteStep)2412_storage)dyn_storage": {
        "base": "t_struct(RouteStep)2412_storage",
        "encoding": "dynamic_array",
        "label": "struct ZapHandlerV1.RouteStep[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)2135": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Factory)2398_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ZapHandlerV1.Factory)",
        "numberOfBytes": "32",
        "value": "t_struct(Factory)2398_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)663,t_array(t_struct(RouteStep)2412_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)663",
        "label": "mapping(contract IERC20 => struct ZapHandlerV1.RouteStep[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RouteStep)2412_storage)dyn_storage"
      },
      "t_mapping(t_contract(IERC20)663,t_mapping(t_contract(IERC20)663,t_array(t_struct(RouteStep)2412_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)663",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct ZapHandlerV1.RouteStep[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)663,t_array(t_struct(RouteStep)2412_storage)dyn_storage)"
      },
      "t_struct(AddressSet)1543_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1242_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Factory)2398_storage": {
        "encoding": "inplace",
        "label": "struct ZapHandlerV1.Factory",
        "members": [
          {
            "astId": 2393,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2395,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutNominator",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2397,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutDenominator",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RouteStep)2412_storage": {
        "encoding": "inplace",
        "label": "struct ZapHandlerV1.RouteStep",
        "members": [
          {
            "astId": 2401,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 2404,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 2407,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "pair",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IUniswapV2Pair)2135"
          },
          {
            "astId": 2409,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutNominator",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2411,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutDenominator",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1242_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1237,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1241,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}