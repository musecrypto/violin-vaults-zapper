{
  "address": "0xAfEf94984f3C3665e72F1a8d4634659621dA18A0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IZapHandler",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IZapHandler",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "ImplementationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "from",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "contract IZapHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullAmountTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "pullTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IZapHandler",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReceived",
          "type": "uint256"
        }
      ],
      "name": "swapERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapERC20Fast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6afad986ce593b8b3c8269595f634d02c31b0dfb682f1d2dab101a1c0cd960ce",
  "receipt": {
    "to": "0xdbfD940f57E63049039404c1b35b9e47e90F2B3e",
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "1164558",
    "logsBloom": "0x
    "blockHash": "0xd8ef9fd4d6f90b62cf27765f05b4e70c2757b91cf7ca34d25274aa1e90368f40",
    "transactionHash": "0x6afad986ce593b8b3c8269595f634d02c31b0dfb682f1d2dab101a1c0cd960ce",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 14203738,
        "transactionHash": "0x6afad986ce593b8b3c8269595f634d02c31b0dfb682f1d2dab101a1c0cd960ce",
        "address": "0xAfEf94984f3C3665e72F1a8d4634659621dA18A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbfd940f57e63049039404c1b35b9e47e90f2b3e"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xd8ef9fd4d6f90b62cf27765f05b4e70c2757b91cf7ca34d25274aa1e90368f40"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 14203738,
        "transactionHash": "0x6afad986ce593b8b3c8269595f634d02c31b0dfb682f1d2dab101a1c0cd960ce",
        "address": "0xAfEf94984f3C3665e72F1a8d4634659621dA18A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dbfd940f57e63049039404c1b35b9e47e90f2b3e",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xd8ef9fd4d6f90b62cf27765f05b4e70c2757b91cf7ca34d25274aa1e90368f40"
      }
    ],
    "blockNumber": 14203738,
    "cumulativeGasUsed": "2007865",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa66745F0092F7460F107E4c66C224553bF4Cd727"
  ],
  "solcInputHash": "e8b1d42f3f3bbb8408360118cf54cde2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IZapHandler\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IZapHandler\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"ImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"from\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract IZapHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullAmountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"pullTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IZapHandler\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReceived\",\"type\":\"uint256\"}],\"name\":\"swapERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapERC20Fast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All though the underlying implementation is upgradeable, the Zap contract provides a safe wrapper that the implementation can never access approved funds.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pullAmountTo(address,uint256)\":{\"details\":\"Can only be called by the implementation.\",\"params\":{\"amount\":\"The amount of tokens to send to the `to` address, cannot exceed the remaining amount indicated by the swap `amount` parameter.\",\"to\":\"The address to send `amount` tokens of the swap to. This is presumably the first AMM pair in the route.\"}},\"pullTo(address)\":{\"details\":\"Can only be called by the implementation.\",\"params\":{\"to\":\"The address to send all remaining tokens of the swap to. This is presumably the first AMM pair in the route.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setImplementation(address)\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"_implementation\":\"The new implementation.\"}},\"setPendingOwner(address)\":{\"details\":\"Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner.\"},\"swapERC20(address,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount that the zapper should take from the `msg.sender` and swap.\",\"fromToken\":\"The token to take from `msg.sender` and exchange for `toToken`.\",\"minReceived\":\"The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.\",\"recipient\":\"The destination address to receive the `toToken`.\",\"toToken\":\"The token that will be bought and sent to the `recipient`.\"}},\"swapERC20Fast(address,address,uint256)\":{\"params\":{\"amount\":\"The amount that the zapper should take from the `msg.sender` and swap.\",\"fromToken\":\"The token to take from `msg.sender` and exchange for `toToken`.\",\"toToken\":\"The token that will be bought and sent to the `msg.sender`.\"}},\"transferOwnership()\":{\"details\":\"Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner.\"}},\"stateVariables\":{\"from\":{\"details\":\"Temporary variables that are set at the beginning of a swap and unset at the end of a swap.This is necessary because the contract employs a pull hook flow to reduce the impact of transfer-tax tokens.`from` and `remaining` have their zero variable moved to value 1, this is because EVMs charge a high cost for moving a variable away from zero.Internally, remaining will always be corrected with a -1 factor.\"},\"implementation\":{\"details\":\"The implementation that actually executes the swap orders\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pullAmountTo(address,uint256)\":{\"notice\":\"When the implementation calls pullAmountTo while in a swap, `amount` tokens of the `swap` amount will be sent from the swap`msg.sender` to the `to` address chosen by the implementation.This amount cannot exceed the amount set in the original swap transaction.Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\"},\"pullTo(address)\":{\"notice\":\"When the implementation calls pullTo while in a swap, the remaining tokens of the `swap` amount will be sent from the swap `msg.sender` to the `to` address chosen by the implementation.This amount cannot exceed the amount set in the original swap transaction.Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\"},\"setImplementation(address)\":{\"notice\":\"Sets the underlying implementation that fulfills the swap orders.\"},\"swapERC20(address,address,address,uint256,uint256)\":{\"notice\":\"Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.The `fromToken` and `toToken` arguments can be AMM pairs.Reverts if the `recipient` received less tokens than `minReceived`.Requires approval.\"},\"swapERC20Fast(address,address,uint256)\":{\"notice\":\"Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.The `fromToken` and `toToken` arguments can be AMM pairs.Requires approval.\"}},\"notice\":\"The Zap contract is an interface that allows other contracts to swap a token for another token without having to directly interact with verbose AMMs directly.It furthermore allows to zap to and from an LP pair within a single transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zap.sol\":\"Zap\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Zap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./dependencies/Ownable.sol\\\";\\nimport \\\"./interfaces/IZap.sol\\\";\\nimport \\\"./interfaces/IZapHandler.sol\\\";\\n\\n/// @notice The Zap contract is an interface that allows other contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\n/// @dev All though the underlying implementation is upgradeable, the Zap contract provides a safe wrapper that the implementation can never access approved funds.\\ncontract Zap is Ownable, IZap {\\n    using SafeERC20 for IERC20;\\n    \\n    /// @dev The implementation that actually executes the swap orders\\n    IZapHandler public implementation;\\n\\n    /// @dev Temporary variables that are set at the beginning of a swap and unset at the end of a swap.\\n    /// @dev This is necessary because the contract employs a pull hook flow to reduce the impact of transfer-tax tokens.\\n    /// @dev `from` and `remaining` have their zero variable moved to value 1, this is because EVMs charge a high cost for moving a variable away from zero.\\n    /// @dev Internally, remaining will always be corrected with a -1 factor.\\n    address public from = address(1);\\n    IERC20 public pendingToken;\\n    uint256 public remaining = 1;\\n\\n    event ImplementationChanged(IZapHandler indexed oldImplementation, IZapHandler indexed newImplementation);\\n    \\n    constructor(address _owner) {\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Reverts if the `recipient` received less tokens than `minReceived`.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `recipient`.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    * @param minReceived The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.\\n    */\\n    function swapERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount, uint256 minReceived) external override returns (uint256 received) {\\n        // Store transaction variables to be used by the implementation in the pullTo hooks.\\n        from = msg.sender;\\n        pendingToken = fromToken;\\n        remaining = amount + 1;\\n\\n        uint256 beforeBal = toToken.balanceOf(recipient);\\n        \\n        // Call the implementation to execute the swap.\\n        implementation.convertERC20(fromToken, toToken, recipient, amount);\\n\\n        // Unset the temporary variables. pendingToken and remaining do not need to be unset.\\n        from = address(1);\\n\\n        // Validate that sufficient tokens were received within the `to` address.\\n        uint256 receivedTokens = toToken.balanceOf(recipient) - beforeBal; \\n        require(receivedTokens >= minReceived, \\\"!minimum not received\\\");\\n\\n        return receivedTokens;\\n    }\\n    \\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `msg.sender`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function swapERC20Fast(IERC20 fromToken, IERC20 toToken, uint256 amount) external override {\\n        // Store transaction variables to be used by the implementation in the pullTo hooks.\\n        from = msg.sender;\\n        pendingToken = fromToken;\\n        remaining = amount + 1;\\n\\n        // Call the implementation to execute the swap.\\n        implementation.convertERC20(fromToken, toToken, msg.sender, amount);\\n\\n        // Unset the temporary variables. pendingToken and remaining do not need to be unset.\\n        from = address(1);\\n    }\\n    \\n    /**\\n    * @notice When the implementation calls pullTo while in a swap, the remaining tokens of the `swap` amount will be sent from the swap `msg.sender` to the `to` address chosen by the implementation.\\n    * @notice This amount cannot exceed the amount set in the original swap transaction.\\n    * @notice Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.\\n    * @notice However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\\n    * @dev Can only be called by the implementation.\\n    * @param to The address to send all remaining tokens of the swap to. This is presumably the first AMM pair in the route.\\n    */\\n    function pullTo(address to) external override {\\n        require(msg.sender == address(implementation), \\\"!implementation\\\");\\n        uint256 amount = remaining - 1;\\n        remaining = 1;\\n        pendingToken.safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n    * @notice When the implementation calls pullAmountTo while in a swap, `amount` tokens of the `swap` amount will be sent from the swap`msg.sender` to the `to` address chosen by the implementation.\\n    * @notice This amount cannot exceed the amount set in the original swap transaction.\\n    * @notice Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.\\n    * @notice However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\\n    * @dev Can only be called by the implementation.\\n    * @param to The address to send `amount` tokens of the swap to. This is presumably the first AMM pair in the route.\\n    * @param amount The amount of tokens to send to the `to` address, cannot exceed the remaining amount indicated by the swap `amount` parameter.\\n    */\\n    function pullAmountTo(address to, uint256 amount) external override {\\n        require(msg.sender == address(implementation), \\\"!implementation\\\");\\n        require(remaining >= amount + 1, \\\"!overdraft\\\");\\n        unchecked {\\n            remaining -= amount; // Safeguard that the implementation cannot overdraft\\n        }\\n\\n        pendingToken.safeTransferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Sets the underlying implementation that fulfills the swap orders.\\n     * @dev Can only be called by the contract owner.\\n     * @param _implementation The new implementation.\\n     */\\n    function setImplementation(IZapHandler _implementation) external override onlyOwner {\\n        IZapHandler oldImplementation = implementation;\\n        implementation = _implementation;\\n\\n        emit ImplementationChanged(oldImplementation, _implementation);\\n\\n    }\\n}\",\"keccak256\":\"0x77a6012fdedb37be5fa81ce9cedaafe4e43755afba8386057c35fa473dfbafc6\",\"license\":\"MIT\"},\"contracts/dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Derived from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/1b27c13096d6e4389d62e7b0766a1db53fbb3f1b/contracts/access/Ownable.sol\\n// Adds pending owner\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address public pendingOwner;\\n\\n    event PendingOwnershipTransferred(address indexed previousPendingOwner, address indexed newPendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to the pendingOwner.\\n     * Can only be called by the pendingOwner.\\n     */\\n    function transferOwnership() public virtual {\\n        require(_msgSender() == pendingOwner, \\\"Ownable: caller is not the pendingOwner\\\");\\n        require(pendingOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Sets the pendingOwner, ownership is only transferred when they call transferOwnership.\\n     * Can only be called by the current owner.\\n     */\\n    function setPendingOwner(address newPendingOwner) external onlyOwner {\\n        address oldPendingOwner = pendingOwner;\\n        pendingOwner = newPendingOwner;\\n\\n        emit PendingOwnershipTransferred(oldPendingOwner, pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        pendingOwner = address(0);\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xfb9f03cd1f1d506e1e180bf5b086049c4820cc9cab2f970218d845d0ad592569\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IZapHandler.sol\\\";\\n\\n/// @notice The IZap interface allows contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\ninterface IZap {\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Reverts if the `recipient` received less tokens than `minReceived`.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `recipient`.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    * @param minReceived The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.\\n    */\\n    function swapERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount, uint256 minReceived) external returns (uint256 received);\\n\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `msg.sender`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function swapERC20Fast(IERC20 fromToken, IERC20 toToken, uint256 amount) external;\\n\\n    /**\\n    * @notice When the implementation calls pullTo while in a swap, the remaining tokens of the `swap` amount will be sent from the swap `msg.sender` to the `to` address chosen by the implementation.\\n    * @notice This amount cannot exceed the amount set in the original swap transaction.\\n    * @notice Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.\\n    * @notice However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\\n    * @dev Can only be called by the implementation.\\n    * @param to The address to send all remaining tokens of the swap to. This is presumably the first AMM pair in the route.\\n    */\\n    function pullTo(address to) external;\\n\\n    /**\\n    * @notice When the implementation calls pullAmountTo while in a swap, `amount` tokens of the `swap` amount will be sent from the swap`msg.sender` to the `to` address chosen by the implementation.\\n    * @notice This amount cannot exceed the amount set in the original swap transaction.\\n    * @notice Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.\\n    * @notice However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\\n    * @dev Can only be called by the implementation.\\n    * @param to The address to send `amount` tokens of the swap to. This is presumably the first AMM pair in the route.\\n    * @param amount The amount of tokens to send to the `to` address, cannot exceed the remaining amount indicated by the swap `amount` parameter.\\n    */\\n    function pullAmountTo(address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Sets the underlying implementation that fulfills the swap orders.\\n     * @dev Can only be called by the contract owner.\\n     * @param implementation The new implementation.\\n     */\\n    function setImplementation(IZapHandler implementation) external;\\n}\",\"keccak256\":\"0x47577d52482c11253da0a26807d4120458558e8bf75f722327c8f4729a71ae9d\",\"license\":\"MIT\"},\"contracts/interfaces/IZapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZapHandler {\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the recipient.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires `msg.sender` to be a Zap instance.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`\\n    * @param toToken The token that will be bought and sent to the recipient.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function convertERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0xfca6bcc7315fdfa7c3d55339469a1419a1a9a7d364b1c449d8e1aa93365d1531\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600380546001600160a01b031916600190811790915560055534801561002957600080fd5b506040516113d33803806113d3833981016040819052610048916100ba565b61005133610060565b61005a81610060565b506100ea565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100cc57600080fd5b81516001600160a01b03811681146100e357600080fd5b9392505050565b6112da806100f96000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063d5ce338911610066578063d5ce3389146101ec578063d784d4261461020c578063e30c39781461021f578063f0defe931461023f57600080fd5b80638da5cb5b1461019b578063ae1b6e17146101b9578063c42069ec146101d957600080fd5b806355234ec0116100c857806355234ec01461012a5780635c60da1b14610146578063715018a61461018b578063880ad0af1461019357600080fd5b80633a831d0c146100ef5780633adfd5a6146101045780635188d10d14610117575b600080fd5b6101026100fd36600461112e565b610252565b005b610102610112366004611068565b610378565b610102610125366004611085565b610446565b61013360055481565b6040519081526020015b60405180910390f35b6002546101669073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013d565b610102610571565b6101026105fe565b60005473ffffffffffffffffffffffffffffffffffffffff16610166565b6004546101669073ffffffffffffffffffffffffffffffffffffffff1681565b6101026101e7366004611068565b610782565b6003546101669073ffffffffffffffffffffffffffffffffffffffff1681565b61010261021a366004611068565b61087a565b6001546101669073ffffffffffffffffffffffffffffffffffffffff1681565b61013361024d3660046110d3565b610972565b60038054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556004805490911673ffffffffffffffffffffffffffffffffffffffff85161790556102ab8160016111f5565b6005556002546040517fbcbf4c8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152336044830152606482018490529091169063bcbf4c8a90608401600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b5050600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790555050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146103fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f21696d706c656d656e746174696f6e000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600160055461040f919061120d565b60016005556003546004549192506104429173ffffffffffffffffffffffffffffffffffffffff90811691168484610c61565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f21696d706c656d656e746174696f6e000000000000000000000000000000000060448201526064016103f5565b6104d28160016111f5565b600554101561053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f216f76657264726166740000000000000000000000000000000000000000000060448201526064016103f5565b6005805482900390556003546004546104429173ffffffffffffffffffffffffffffffffffffffff91821691168484610c61565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6105fc6000610cfc565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e646960448201527f6e674f776e65720000000000000000000000000000000000000000000000000060648201526084016103f5565b60015473ffffffffffffffffffffffffffffffffffffffff16610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103f5565b6001546105fc9073ffffffffffffffffffffffffffffffffffffffff16610cfc565b60005473ffffffffffffffffffffffffffffffffffffffff163314610803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fcfbf4028add9318bbf716f08c348595afb063b0e9feed1f86d33681a4b3ed4d390600090a35050565b60038054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556004805490911673ffffffffffffffffffffffffffffffffffffffff871617905560006109cd8360016111f5565b6005556040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600091908716906370a082319060240160206040518083038186803b158015610a3b57600080fd5b505afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a73919061116f565b6002546040517fbcbf4c8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015288811660448301526064820188905292935091169063bcbf4c8a90608401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b5050600380547fffffffffffffffffffffffff000000000000000000000000000000000000000016600117905550506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260009183918916906370a082319060240160206040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be0919061116f565b610bea919061120d565b905083811015610c56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f216d696e696d756d206e6f74207265636569766564000000000000000000000060448201526064016103f5565b979650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610cf6908590610d7b565b50505050565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556000805473ffffffffffffffffffffffffffffffffffffffff848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610ddd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e8c9092919063ffffffff16565b805190915015610e875780806020019051810190610dfb91906110b1565b610e87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103f5565b505050565b6060610e9b8484600085610ea5565b90505b9392505050565b606082471015610f37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103f5565b843b610f9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f5565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fc89190611188565b60006040518083038185875af1925050503d8060008114611005576040519150601f19603f3d011682016040523d82523d6000602084013e61100a565b606091505b5091509150610c5682828660608315611024575081610e9e565b8251156110345782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f591906111a4565b60006020828403121561107a57600080fd5b8135610e9e8161127f565b6000806040838503121561109857600080fd5b82356110a38161127f565b946020939093013593505050565b6000602082840312156110c357600080fd5b81518015158114610e9e57600080fd5b600080600080600060a086880312156110eb57600080fd5b85356110f68161127f565b945060208601356111068161127f565b935060408601356111168161127f565b94979396509394606081013594506080013592915050565b60008060006060848603121561114357600080fd5b833561114e8161127f565b9250602084013561115e8161127f565b929592945050506040919091013590565b60006020828403121561118157600080fd5b5051919050565b6000825161119a818460208701611224565b9190910192915050565b60208152600082518060208401526111c3816040850160208701611224565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561120857611208611250565b500190565b60008282101561121f5761121f611250565b500390565b60005b8381101561123f578181015183820152602001611227565b83811115610cf65750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146112a157600080fd5b5056fea2646970667358221220b770feb809572fd73197b3bb4ae2fddab521c8994ea6f2038721f39c4bf486cb64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063d5ce338911610066578063d5ce3389146101ec578063d784d4261461020c578063e30c39781461021f578063f0defe931461023f57600080fd5b80638da5cb5b1461019b578063ae1b6e17146101b9578063c42069ec146101d957600080fd5b806355234ec0116100c857806355234ec01461012a5780635c60da1b14610146578063715018a61461018b578063880ad0af1461019357600080fd5b80633a831d0c146100ef5780633adfd5a6146101045780635188d10d14610117575b600080fd5b6101026100fd36600461112e565b610252565b005b610102610112366004611068565b610378565b610102610125366004611085565b610446565b61013360055481565b6040519081526020015b60405180910390f35b6002546101669073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013d565b610102610571565b6101026105fe565b60005473ffffffffffffffffffffffffffffffffffffffff16610166565b6004546101669073ffffffffffffffffffffffffffffffffffffffff1681565b6101026101e7366004611068565b610782565b6003546101669073ffffffffffffffffffffffffffffffffffffffff1681565b61010261021a366004611068565b61087a565b6001546101669073ffffffffffffffffffffffffffffffffffffffff1681565b61013361024d3660046110d3565b610972565b60038054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556004805490911673ffffffffffffffffffffffffffffffffffffffff85161790556102ab8160016111f5565b6005556002546040517fbcbf4c8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152336044830152606482018490529091169063bcbf4c8a90608401600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b5050600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790555050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146103fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f21696d706c656d656e746174696f6e000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600160055461040f919061120d565b60016005556003546004549192506104429173ffffffffffffffffffffffffffffffffffffffff90811691168484610c61565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f21696d706c656d656e746174696f6e000000000000000000000000000000000060448201526064016103f5565b6104d28160016111f5565b600554101561053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f216f76657264726166740000000000000000000000000000000000000000000060448201526064016103f5565b6005805482900390556003546004546104429173ffffffffffffffffffffffffffffffffffffffff91821691168484610c61565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6105fc6000610cfc565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e646960448201527f6e674f776e65720000000000000000000000000000000000000000000000000060648201526084016103f5565b60015473ffffffffffffffffffffffffffffffffffffffff16610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103f5565b6001546105fc9073ffffffffffffffffffffffffffffffffffffffff16610cfc565b60005473ffffffffffffffffffffffffffffffffffffffff163314610803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103f5565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fcfbf4028add9318bbf716f08c348595afb063b0e9feed1f86d33681a4b3ed4d390600090a35050565b60038054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556004805490911673ffffffffffffffffffffffffffffffffffffffff871617905560006109cd8360016111f5565b6005556040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152600091908716906370a082319060240160206040518083038186803b158015610a3b57600080fd5b505afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a73919061116f565b6002546040517fbcbf4c8a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015288811660448301526064820188905292935091169063bcbf4c8a90608401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b5050600380547fffffffffffffffffffffffff000000000000000000000000000000000000000016600117905550506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260009183918916906370a082319060240160206040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be0919061116f565b610bea919061120d565b905083811015610c56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f216d696e696d756d206e6f74207265636569766564000000000000000000000060448201526064016103f5565b979650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610cf6908590610d7b565b50505050565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556000805473ffffffffffffffffffffffffffffffffffffffff848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610ddd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e8c9092919063ffffffff16565b805190915015610e875780806020019051810190610dfb91906110b1565b610e87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103f5565b505050565b6060610e9b8484600085610ea5565b90505b9392505050565b606082471015610f37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103f5565b843b610f9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103f5565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fc89190611188565b60006040518083038185875af1925050503d8060008114611005576040519150601f19603f3d011682016040523d82523d6000602084013e61100a565b606091505b5091509150610c5682828660608315611024575081610e9e565b8251156110345782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f591906111a4565b60006020828403121561107a57600080fd5b8135610e9e8161127f565b6000806040838503121561109857600080fd5b82356110a38161127f565b946020939093013593505050565b6000602082840312156110c357600080fd5b81518015158114610e9e57600080fd5b600080600080600060a086880312156110eb57600080fd5b85356110f68161127f565b945060208601356111068161127f565b935060408601356111168161127f565b94979396509394606081013594506080013592915050565b60008060006060848603121561114357600080fd5b833561114e8161127f565b9250602084013561115e8161127f565b929592945050506040919091013590565b60006020828403121561118157600080fd5b5051919050565b6000825161119a818460208701611224565b9190910192915050565b60208152600082518060208401526111c3816040850160208701611224565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561120857611208611250565b500190565b60008282101561121f5761121f611250565b500390565b60005b8381101561123f578181015183820152602001611227565b83811115610cf65750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146112a157600080fd5b5056fea2646970667358221220b770feb809572fd73197b3bb4ae2fddab521c8994ea6f2038721f39c4bf486cb64736f6c63430008060033",
  "devdoc": {
    "details": "All though the underlying implementation is upgradeable, the Zap contract provides a safe wrapper that the implementation can never access approved funds.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pullAmountTo(address,uint256)": {
        "details": "Can only be called by the implementation.",
        "params": {
          "amount": "The amount of tokens to send to the `to` address, cannot exceed the remaining amount indicated by the swap `amount` parameter.",
          "to": "The address to send `amount` tokens of the swap to. This is presumably the first AMM pair in the route."
        }
      },
      "pullTo(address)": {
        "details": "Can only be called by the implementation.",
        "params": {
          "to": "The address to send all remaining tokens of the swap to. This is presumably the first AMM pair in the route."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setImplementation(address)": {
        "details": "Can only be called by the contract owner.",
        "params": {
          "_implementation": "The new implementation."
        }
      },
      "setPendingOwner(address)": {
        "details": "Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner."
      },
      "swapERC20(address,address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount that the zapper should take from the `msg.sender` and swap.",
          "fromToken": "The token to take from `msg.sender` and exchange for `toToken`.",
          "minReceived": "The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.",
          "recipient": "The destination address to receive the `toToken`.",
          "toToken": "The token that will be bought and sent to the `recipient`."
        }
      },
      "swapERC20Fast(address,address,uint256)": {
        "params": {
          "amount": "The amount that the zapper should take from the `msg.sender` and swap.",
          "fromToken": "The token to take from `msg.sender` and exchange for `toToken`.",
          "toToken": "The token that will be bought and sent to the `msg.sender`."
        }
      },
      "transferOwnership()": {
        "details": "Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner."
      }
    },
    "stateVariables": {
      "from": {
        "details": "Temporary variables that are set at the beginning of a swap and unset at the end of a swap.This is necessary because the contract employs a pull hook flow to reduce the impact of transfer-tax tokens.`from` and `remaining` have their zero variable moved to value 1, this is because EVMs charge a high cost for moving a variable away from zero.Internally, remaining will always be corrected with a -1 factor."
      },
      "implementation": {
        "details": "The implementation that actually executes the swap orders"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pullAmountTo(address,uint256)": {
        "notice": "When the implementation calls pullAmountTo while in a swap, `amount` tokens of the `swap` amount will be sent from the swap`msg.sender` to the `to` address chosen by the implementation.This amount cannot exceed the amount set in the original swap transaction.Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens."
      },
      "pullTo(address)": {
        "notice": "When the implementation calls pullTo while in a swap, the remaining tokens of the `swap` amount will be sent from the swap `msg.sender` to the `to` address chosen by the implementation.This amount cannot exceed the amount set in the original swap transaction.Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens."
      },
      "setImplementation(address)": {
        "notice": "Sets the underlying implementation that fulfills the swap orders."
      },
      "swapERC20(address,address,address,uint256,uint256)": {
        "notice": "Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.The `fromToken` and `toToken` arguments can be AMM pairs.Reverts if the `recipient` received less tokens than `minReceived`.Requires approval."
      },
      "swapERC20Fast(address,address,uint256)": {
        "notice": "Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.The `fromToken` and `toToken` arguments can be AMM pairs.Requires approval."
      }
    },
    "notice": "The Zap contract is an interface that allows other contracts to swap a token for another token without having to directly interact with verbose AMMs directly.It furthermore allows to zap to and from an LP pair within a single transaction.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5292,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5294,
        "contract": "contracts/Zap.sol:Zap",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2977,
        "contract": "contracts/Zap.sol:Zap",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IZapHandler)5505"
      },
      {
        "astId": 2984,
        "contract": "contracts/Zap.sol:Zap",
        "label": "from",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2987,
        "contract": "contracts/Zap.sol:Zap",
        "label": "pendingToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1247"
      },
      {
        "astId": 2990,
        "contract": "contracts/Zap.sol:Zap",
        "label": "remaining",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1247": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IZapHandler)5505": {
        "encoding": "inplace",
        "label": "contract IZapHandler",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}