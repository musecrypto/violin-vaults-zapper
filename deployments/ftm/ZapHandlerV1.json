{
  "address": "0x56E862Da14e4C998dC2c297D17501512A524D527",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "FactoryRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "alreadyExists",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "name": "FactorySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "mainToken",
          "type": "address"
        }
      ],
      "name": "MainTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPendingOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "PendingOwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "alreadyExists",
          "type": "bool"
        }
      ],
      "name": "RouteAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "factories",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "removeFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "routeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routes",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutNominator",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amountsOutDenominator",
          "type": "uint32"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_mainToken",
          "type": "address"
        }
      ],
      "name": "setMainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "inputRoute",
          "type": "address[]"
        }
      ],
      "name": "setRoute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSwapType",
      "outputs": [
        {
          "internalType": "enum ZapHandlerV1.SwapType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd20d3fe2a2b5e4b98902e84a622831339816fc834bc0eb15521a185e51129b3",
  "receipt": {
    "to": "0xdbfD940f57E63049039404c1b35b9e47e90F2B3e",
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3971671",
    "logsBloom": "0x
    "blockHash": "0x0000cbf1000000dbbf67503d5ccd5cd05c39b26c1c2fb3db7f718ae0f937ce20",
    "transactionHash": "0xcd20d3fe2a2b5e4b98902e84a622831339816fc834bc0eb15521a185e51129b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21800597,
        "transactionHash": "0xcd20d3fe2a2b5e4b98902e84a622831339816fc834bc0eb15521a185e51129b3",
        "address": "0x56E862Da14e4C998dC2c297D17501512A524D527",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbfd940f57e63049039404c1b35b9e47e90f2b3e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0000cbf1000000dbbf67503d5ccd5cd05c39b26c1c2fb3db7f718ae0f937ce20"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21800597,
        "transactionHash": "0xcd20d3fe2a2b5e4b98902e84a622831339816fc834bc0eb15521a185e51129b3",
        "address": "0x56E862Da14e4C998dC2c297D17501512A524D527",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dbfd940f57e63049039404c1b35b9e47e90f2b3e",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0000cbf1000000dbbf67503d5ccd5cd05c39b26c1c2fb3db7f718ae0f937ce20"
      }
    ],
    "blockNumber": 21800597,
    "cumulativeGasUsed": "3971671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa66745F0092F7460F107E4c66C224553bF4Cd727"
  ],
  "solcInputHash": "e8b1d42f3f3bbb8408360118cf54cde2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"FactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"name\":\"FactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"mainToken\",\"type\":\"address\"}],\"name\":\"MainTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"PendingOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"}],\"name\":\"RouteAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"routeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutNominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amountsOutDenominator\",\"type\":\"uint32\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_mainToken\",\"type\":\"address\"}],\"name\":\"setMainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"inputRoute\",\"type\":\"address[]\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapType\",\"outputs\":[{\"internalType\":\"enum ZapHandlerV1.SwapType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertERC20(address,address,address,uint256)\":{\"details\":\"Switches over the different routing types to let the specific handler functions take care of them.\",\"params\":{\"amount\":\"The amount that the zapper should take from the `msg.sender` and swap.\",\"fromToken\":\"The token to take from `msg.sender` and exchange for `toToken`.\",\"recipient\":\"The destination address to receive the `toToken`.\",\"toToken\":\"The token that will be bought and sent to the recipient.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFactory(address,uint32,uint32)\":{\"details\":\"Adds a factory to the list of registered factories that can be used within RouteSpec.\"},\"setMainToken(address)\":{\"details\":\"Updates the main token, this is used for automatic route tunneling.\"},\"setPendingOwner(address)\":{\"details\":\"Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner.\"},\"setRoute(address,address,address[])\":{\"params\":{\"from\":\"the token to swap from.\",\"inputRoute\":\"A route in RouteSpec notation indicating the swap steps and the uniswap like factories these swaps should be made.\",\"to\":\"the token to swap to.\"}},\"transferOwnership()\":{\"details\":\"Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner.\"}},\"stateVariables\":{\"factories\":{\"details\":\"Factory address to the specification of the factory including it's fee structure.\"},\"factorySet\":{\"details\":\"An enumerable list of all registered factories.\"},\"mainToken\":{\"details\":\"The main token most AMMs and pairs use, eg. WETH.\"},\"pairInfo\":{\"details\":\"The token0 and token1 of the pair if the pair has been registered.\"},\"routes\":{\"details\":\"For any registered from and to pair, provide a route used by the algorithm to execute the swap.\"},\"tokenSwapType\":{\"details\":\"represents the swap type of the route from token0 to token1, for example TOKEN_TO_PAIR.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convertERC20(address,address,address,uint256)\":{\"notice\":\"Swap `amount` of `fromToken` to `toToken` and send them to the recipient.The `fromToken` and `toToken` arguments can be AMM pairs.Requires `msg.sender` to be a Zap instance.\"},\"factoryLength()\":{\"notice\":\"Returns the total number of registered factories.\"},\"getFactory(uint256)\":{\"notice\":\"Gets a registered factory at a specific index, use factoryLength() for the upper bound.\"},\"removeFactory(address)\":{\"notice\":\"Removes a factory from the list of registered factories.\"},\"routeLength(address,address)\":{\"notice\":\"Returns the number of steps on the route from token0 to token1.\"},\"setRoute(address,address,address[])\":{\"notice\":\"Generates and saves a route (and inverse of this route) based on the RouteSpec encoded `inputRoute`.\"}},\"notice\":\"The ZapHandlerV1 is the first implementation of the Violin Zap protocol.It allows the owner to define routes that span over multiple uniswap factories.Furthermore, individual hops in the route can set the zero factory to indicate that this hop should be subroutes by an existing route in the handler.All though routes need to be added manually, swaps from token a to token b will create the route [a, main, b] if the main token is set.The ZapHandlerV1 supports token->token, pair->token and token->pair swaps.For pair->token swaps, the pair will first be burned and then two swaps to token are made.For token->pair swaps, two swaps to each subtoken are made and then the pair is minted.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZapHandlerV1.sol\":\"ZapHandlerV1\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/ZapHandlerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./dependencies/Ownable.sol\\\";\\nimport \\\"./interfaces/IZap.sol\\\";\\nimport \\\"./interfaces/IZapHandler.sol\\\";\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\n/**\\n * @notice The ZapHandlerV1 is the first implementation of the Violin Zap protocol.\\n * @notice It allows the owner to define routes that span over multiple uniswap factories.\\n * @notice Furthermore, individual hops in the route can set the zero factory to indicate that this hop should be subroutes by an existing route in the handler.\\n * @notice All though routes need to be added manually, swaps from token a to token b will create the route [a, main, b] if the main token is set.\\n * @notice The ZapHandlerV1 supports token->token, pair->token and token->pair swaps.\\n * @notice For pair->token swaps, the pair will first be burned and then two swaps to token are made.\\n * @notice For token->pair swaps, two swaps to each subtoken are made and then the pair is minted.\\n */\\ncontract ZapHandlerV1 is Ownable, IZapHandler, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    \\n    /// @dev A list of ways the swap can occur, each way has distinct logic in the algorithm.\\n    enum SwapType {\\n        UNDEFINED,\\n        TOKEN_TO_TOKEN,\\n        TOKEN_TO_PAIR,\\n        PAIR_TO_TOKEN,\\n        PAIR_TO_PAIR\\n    }\\n\\n    /// @dev represents the swap type of the route from token0 to token1, for example TOKEN_TO_PAIR.\\n    mapping(IERC20 => mapping(IERC20 => SwapType)) public tokenSwapType;\\n\\n    /// @dev Represents the token composition of an LP pair. Used for minting and burning LPs.\\n    struct PairInfo {\\n        IERC20 token0;\\n        IERC20 token1;\\n    }\\n\\n    /// @dev The token0 and token1 of the pair if the pair has been registered.\\n    mapping(IERC20 => PairInfo) public pairInfo;\\n\\n    /// @dev Represents a UniswapV2Factory compatible factory.\\n    struct Factory {\\n        /// @dev The address of the factory.\\n        address factory;\\n        /// @dev The fee nominator of the AMM, usually set to 997 for a 0.3% fee.\\n        uint32 amountsOutNominator;\\n        /// @dev The fee denominator of the AMM, usually set to 1000.\\n        uint32 amountsOutDenominator;\\n    }\\n    /// @dev An enumerable list of all registered factories.\\n    EnumerableSet.AddressSet factorySet;\\n    /// @dev Factory address to the specification of the factory including it's fee structure.\\n    mapping(address => Factory) public factories;\\n\\n\\n    /// @dev Represents a single step in a swap route.\\n    /// @dev Within the algorithm, two special steps are employed: The getFromZapperStep and getFromThisContractStep.\\n    struct RouteStep {\\n        /// @dev The token to swap from.\\n        /// @dev address(0) to indicate that the to token can be pulled from the Zap (msg.sender) contract.\\n        /// @dev address(1) to indicate that the `to` token can be pulled from this contract.\\n        IERC20 from;\\n        /// @dev The token to swap to.\\n        IERC20 to;\\n        /// @dev The UniswapV2 compatible pair address to swap over. \\n        IUniswapV2Pair pair;\\n        /// @dev The fee nominator of the AMM, usually set to 997 for a 0.3% fee.\\n        uint32 amountsOutNominator;\\n        /// @dev The fee denominator of the AMM, usually set to 1000.\\n        uint32 amountsOutDenominator;\\n    }\\n\\n    /// @dev For any registered from and to pair, provide a route used by the algorithm to execute the swap.\\n    mapping(IERC20 => mapping(IERC20 => RouteStep[])) public routes;\\n\\n    /// @dev The main token most AMMs and pairs use, eg. WETH.\\n    IERC20 public mainToken;\\n\\n\\n    event FactorySet(\\n        address indexed factory,\\n        bool indexed alreadyExists,\\n        uint32 amountsOutNominator,\\n        uint32 amountsOutDenominator\\n    );\\n    event FactoryRemoved(address indexed factory);\\n    event RouteAdded(\\n        IERC20 indexed from,\\n        IERC20 indexed to,\\n        bool indexed alreadyExists\\n    );\\n    event MainTokenSet(IERC20 indexed mainToken);\\n\\n    constructor(address _owner) {\\n        _transferOwnership(_owner);\\n    }\\n    \\n    //** ROUTING **/\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the recipient.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires `msg.sender` to be a Zap instance.\\n    * @dev Switches over the different routing types to let the specific handler functions take care of them.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the recipient.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function convertERC20(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 amount\\n    ) external override {\\n        // Fetch the type of swap or discover it if it's not cached yet.\\n        SwapType edgeType = tokenSwapType[fromToken][toToken];\\n        if (edgeType == SwapType.UNDEFINED)\\n            edgeType = generateSwapType(fromToken, toToken);\\n\\n        // Execute the swap according to its type.\\n        if (edgeType == SwapType.TOKEN_TO_TOKEN) {\\n            handleTokenToToken(fromToken, toToken, recipient, amount);\\n        } else if (edgeType == SwapType.TOKEN_TO_PAIR) {\\n            handleTokenToPair(fromToken, toToken, recipient, amount);\\n        } else if (edgeType == SwapType.PAIR_TO_TOKEN) {\\n            handlePairToToken(fromToken, toToken, recipient, amount);\\n        } else if (edgeType == SwapType.PAIR_TO_PAIR) {\\n            handlePairToPair(fromToken, toToken, recipient, amount);\\n        }\\n    }\\n\\n    /// @notice Swap a token to another token, both tokens are not LPs. This is the most simple swap type.\\n    /// @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    /// @param toToken The token that will be bought and sent to the recipient.\\n    /// @param recipient The destination address to receive the `toToken`.\\n    /// @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    function handleTokenToToken(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        // Swap along the route from the `fromToken` to the `toToken`\\n        // The initial step is set to the dummy to take the tokens out of the Zap contract.\\n        RouteStep memory lastStep = handleRoute(\\n            getFromZapperStep(),\\n            fromToken,\\n            toToken,\\n            amount\\n        );\\n        // Take the tokens out of the last step and forward them to the recipient. The last amount parameter is only used for the dummies so is set to zero.\\n        handleSwap(lastStep, recipient, 0);\\n    }\\n\\n    /// @notice Swap an LP pair to a token. This is done by burning the LP pair into token0 and token1, temporarily stored inside this contract.\\n    /// @notice Then, token0 and token1 are both swapped to the `toToken` as if they were TOKEN_TO_TOKEN.\\n    /// @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    /// @param toToken The token that will be bought and sent to the `recipient` address.\\n    /// @param recipient The destination address to receive the `toToken`.\\n    /// @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    function handlePairToToken(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        // Get the token0 and token1 pair info of the from token, this has already been generated.\\n        PairInfo memory fromInfo = pairInfo[fromToken];\\n\\n        // Pull all LP tokens into the LP contract and burn them to receive the underlying tokens inside of this address.\\n        IZap(msg.sender).pullAmountTo(address(fromToken), amount);\\n        IUniswapV2Pair(address(fromToken)).burn(address(this));\\n        \\n        /// Executes a swap from `token0` to the `toToken` and sends them to the recipient`.\\n        uint256 token0bal = fromInfo.token0.balanceOf(address(this));\\n        if (fromInfo.token0 == toToken) {\\n            toToken.safeTransfer(recipient, token0bal);\\n        } else {\\n            RouteStep memory lastStepToken0 = handleRoute(\\n                getFromThisContractStep(fromInfo.token0),\\n                fromInfo.token0,\\n                toToken,\\n                token0bal\\n            );\\n            handleSwap(lastStepToken0, recipient, 0);\\n        }\\n\\n        /// Executes a swap from `token1` to the `toToken` and sends them to the recipient`.\\n        uint256 token1bal = fromInfo.token1.balanceOf(address(this));\\n        if (fromInfo.token1 == toToken) {\\n            toToken.safeTransfer(recipient, token1bal);\\n        } else {\\n            RouteStep memory lastStepToken1 = handleRoute(\\n                getFromThisContractStep(fromInfo.token1),\\n                fromInfo.token1,\\n                toToken,\\n                token1bal\\n            );\\n            handleSwap(lastStepToken1, recipient, 0);\\n        }\\n    }\\n\\n    /// @notice Swap a token to an LP pair. This is done by swapping half of the token `amount` to token0 and the other half to token1.\\n    /// @notice Finally, token0 and token1, stored inside the contract, are forwarded to the LP pair and the LP pair tokens are minted and sent to the recipient.\\n    /// @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    /// @param toToken The token that will be bought and sent to the `recipient` address.\\n    /// @param recipient The destination address to receive the `toToken`.\\n    /// @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    function handleTokenToPair(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        // Get the token0 and token1 pair info of the from token, this has already been generated.\\n        PairInfo memory toInfo = pairInfo[toToken];\\n\\n        uint256 amount0 = amount / 2;\\n        uint256 amount1 = amount - amount0;\\n\\n        /// Swap amount0 (half of amount) to token0 and store it in this contract.\\n        if (fromToken == toInfo.token0) {\\n            IZap(msg.sender).pullAmountTo(address(this), amount0);\\n        } else {\\n            RouteStep memory lastStepToken0 = handleRoute(\\n                getFromZapperStep(),\\n                fromToken,\\n                toInfo.token0,\\n                amount0\\n            );\\n\\n            handleSwap(lastStepToken0, address(this), amount0);\\n        }\\n\\n        /// Swap amount1 (half of amount) to token1 and store it in this contract.\\n        if (fromToken == toInfo.token1) {\\n            IZap(msg.sender).pullAmountTo(address(this), amount1);\\n        } else {\\n            RouteStep memory lastStepToken1 = handleRoute(\\n                getFromZapperStep(),\\n                fromToken,\\n                toInfo.token1,\\n                amount1\\n            );\\n            handleSwap(lastStepToken1, address(this), amount1);\\n        }\\n        // Calculate the correct amounts to add to the AMM pair, similar to the uniswap router, there's some inefficiency for transfer-tax tokens.\\n        uint256 balance0 = toInfo.token0.balanceOf(address(this));\\n        uint256 balance1 = toInfo.token1.balanceOf(address(this));\\n        (uint256 res0, uint256 res1, ) = IUniswapV2Pair(address(toToken))\\n            .getReserves();\\n        uint256 amount0ToPair = balance0;\\n        uint256 amount1ToPair = (balance0 * res1) / res0;\\n\\n        if (amount1ToPair > balance1) {\\n            amount0ToPair = (balance1 * res0) / res1;\\n            amount1ToPair = balance1;\\n        }\\n        \\n        // Transfer the ideal amount of tokens to the LP pair.\\n        toInfo.token0.safeTransfer(address(toToken), amount0ToPair);\\n        toInfo.token1.safeTransfer(address(toToken), amount1ToPair);\\n        \\n        // The dust is transfered to the owner as this is otherwise lost and `to` will not handle this for our contracts.\\n        if (amount0ToPair < balance0) {\\n            toInfo.token0.safeTransfer(owner(), balance0 - amount0ToPair);\\n        }\\n        if (amount1ToPair < balance1) {\\n            toInfo.token1.safeTransfer(owner(), balance1 - amount1ToPair);\\n        }\\n\\n        // Finally the LP pair is minted.\\n        IUniswapV2Pair(address(toToken)).mint(recipient);\\n    }\\n\\n    /// @dev This iteration of the zap handler does not support Pair->Pair swaps yet. If needed, this could be done by two pair->token swaps.\\n    function handlePairToPair(\\n        IERC20 /**fromToken*/,\\n        IERC20 /**toToken*/,\\n        address /**recipient*/,\\n        uint256 /**amount*/\\n    ) private pure {\\n        // TODO: PAIR TO PAIR IMPLEMENTATION\\n        revert(\\\"unimplemented feature: pair to pair routing\\\");\\n    }\\n\\n    //** ROUTE HANDLERS **/\\n\\n    /**\\n     * @dev Swaps tokens along the saved route between `from` and `to`. The last swap step is not yet handled (swapped) to allow the caller to chose a destination for it.\\n     * @dev This pull mechanism (using lastStep) is done to allow the wildcard (zero factory) notation to function efficiently. Eg. routes like [token0, 0, wmatic, 0, token1].\\n     * @dev handleRoute goes through all steps along the route and recurses through subroutes to do the same. It pulls funds from the previous step pairs into the current step pairs.\\n     * @dev If a route does not exist yet, it attempts to tunnel a route over the main token. This will revert if there is no such route possible.\\n     * @param from The token to swap from.\\n     * @param to The token to swap to.\\n     * @param firstAmount The amount of tokens to pull from the Zap, will only be used if the previousStep is set to the from-zap dummy.\\n     * @return lastStep The last swap step that still needs to be handled. This needs to be handled to actually send the to tokens to a location.\\n     */\\n    function handleRoute(\\n        RouteStep memory previousStep,\\n        IERC20 from,\\n        IERC20 to,\\n        uint256 firstAmount\\n    ) private returns (RouteStep memory lastStep) {\\n        RouteStep[] memory route = routes[from][to];\\n        if (route.length == 0) {\\n            generateAutomaticRoute(from, to);\\n            route = routes[from][to];\\n        }\\n\\n        for (uint256 i = 0; i < route.length; i++) {\\n            RouteStep memory step = route[i];\\n            // Zero pair indicates nested routing.\\n            if (address(step.pair) == address(0)) {\\n                previousStep = handleRoute(\\n                    previousStep,\\n                    step.from,\\n                    step.to,\\n                    firstAmount\\n                );\\n            } else {\\n                handleSwap(previousStep, address(step.pair), firstAmount);\\n                previousStep = step;\\n            }\\n        }\\n        return (previousStep);\\n    }\\n\\n    /**\\n     * @dev handleSwap executes a swap on the provided `step` pair. It requires that there are already `from` tokens deposited into this pair.\\n     * @dev As many `to` tokens will then be sent to the recipient as is allowed by the pair curve.\\n     * @dev It thus executes a swap on a pair given the pre-existing deposit, and forwards the result to recipient.\\n     * @dev Dummy steps can be provided to pull tokens from either the Zap contract or from this contract.\\n     * @param step The step to swap in and transfer from.\\n     * @param recipient The recipient to sent the swap result to.\\n     * @param amountIn The amount of tokens to pull from the Zap. Should only be set if ussing a from zap dummy (otherwise it's ignored).\\n     */\\n    function handleSwap(\\n        RouteStep memory step,\\n        address recipient,\\n        uint256 amountIn\\n    ) private {\\n        // We first handle the dummy step cases.\\n        // from=address(0): Transfer `amountIn` from the zap contract to the recipient. This is used as the first step in the route.\\n        // from=addres(1): Transfer all tokens in this contract to the recipient. This is used for the LP related functionality.\\n        if (address(step.from) == address(0)) {\\n            IZap(msg.sender).pullAmountTo(recipient, amountIn);\\n        } else if (address(step.from) == address(1)) {\\n            step.to.safeTransfer(recipient, step.to.balanceOf(address(this)));\\n        } else {\\n            // If the step is not a dummy, this means an actual AMM swap has to occur.\\n            // For gas optimization, we write out the two cases fully (where from is token0 and where from is token1).\\n            if (address(step.from) < address(step.to)) {\\n                (uint256 reserveIn, uint256 reserveOut, ) = step\\n                    .pair\\n                    .getReserves();\\n                amountIn = step.from.balanceOf(address(step.pair)) - reserveIn;\\n                uint256 amountOut = getAmountOut(\\n                    amountIn,\\n                    reserveIn,\\n                    reserveOut,\\n                    step.amountsOutNominator,\\n                    step.amountsOutDenominator\\n                );\\n                step.pair.swap(0, amountOut, recipient, \\\"\\\");\\n            } else {\\n                (uint256 reserveOut, uint256 reserveIn, ) = step\\n                    .pair\\n                    .getReserves();\\n                amountIn = step.from.balanceOf(address(step.pair)) - reserveIn;\\n                uint256 amountOut = getAmountOut(\\n                    amountIn,\\n                    reserveIn,\\n                    reserveOut,\\n                    step.amountsOutNominator,\\n                    step.amountsOutDenominator\\n                );\\n                step.pair.swap(amountOut, 0, recipient, \\\"\\\");\\n            }\\n        }\\n    }\\n\\n    //** CONFIGURATION **/\\n    /// @dev Attempts to tunnel a route over the main token and save it.\\n    /// @dev This route is of the form [from, 0, main, 0, to]\\n    function generateAutomaticRoute(IERC20 from, IERC20 to) private {\\n        IERC20 main = mainToken;\\n        require(from != main && to != main, \\\"!no route found\\\");\\n        address[] memory route = new address[](5);\\n        route[0] = address(from);\\n        route[1] = address(0);\\n        route[2] = address(main);\\n        route[3] = address(0);\\n        route[4] = address(to);\\n        _setRoute(from, to, route);\\n    }\\n\\n    /// @dev Adds a factory to the list of registered factories that can be used within RouteSpec.\\n    function setFactory(\\n        address factory,\\n        uint32 amountsOutNominator,\\n        uint32 amountsOutDenominator\\n    ) external onlyOwner {\\n        require(amountsOutDenominator >= amountsOutNominator, \\\"!nom > denom\\\");\\n        require(amountsOutNominator != 0, \\\"!zero\\\");\\n        assert(amountsOutNominator != 0);\\n        require(factory != address(0), \\\"!zero factory\\\"); // reserved for subroutes\\n        bool alreadyExists = factorySet.contains(factory); // for event\\n\\n        factories[factory] = Factory({\\n            factory: factory,\\n            amountsOutNominator: amountsOutNominator,\\n            amountsOutDenominator: amountsOutDenominator\\n        });\\n        factorySet.add(factory);\\n\\n        emit FactorySet(\\n            factory,\\n            alreadyExists,\\n            amountsOutNominator,\\n            amountsOutDenominator\\n        );\\n    }\\n    /// @notice Removes a factory from the list of registered factories.\\n    function removeFactory(address factory) external onlyOwner {\\n        require(factorySet.contains(factory), \\\"!exists\\\");\\n        factorySet.remove(factory);\\n        delete factories[factory];\\n\\n        emit FactoryRemoved(factory);\\n    }\\n\\n    /**\\n     * @notice Generates and saves a route (and inverse of this route) based on the RouteSpec encoded `inputRoute`.\\n     * @param from the token to swap from.\\n     * @param to the token to swap to.\\n     * @param inputRoute A route in RouteSpec notation indicating the swap steps and the uniswap like factories these swaps should be made.\\n     */\\n    function setRoute(\\n        IERC20 from,\\n        IERC20 to,\\n        address[] memory inputRoute\\n    ) external onlyOwner {\\n        _setRoute(from, to, inputRoute);\\n    }\\n\\n    /**\\n     * @dev Generates a route based on the RouteSpec encoded `inputRoute` and saves it under routes.\\n     * @dev A route is denoted as a list of RouteSteps.\\n     * @dev Also generates and saves the inverse of the route.\\n     */\\n    function _setRoute(\\n        IERC20 from,\\n        IERC20 to,\\n        address[] memory inputRoute\\n    ) private {\\n        bool alreadyExists = routes[from][to].length > 0;\\n\\n        generateRoute(from, to, inputRoute);\\n        emit RouteAdded(from, to, alreadyExists);\\n\\n        generateInvertedRoute(from, to);\\n        emit RouteAdded(to, from, alreadyExists);\\n    }\\n\\n    /// @dev Updates the main token, this is used for automatic route tunneling.\\n    function setMainToken(IERC20 _mainToken) external onlyOwner {\\n        mainToken = _mainToken;\\n        emit MainTokenSet(_mainToken);\\n    }\\n\\n    //** ROUTE GENERATION **/\\n\\n    /**\\n     * @dev Generates a new route from token0 and token1 using RouteSpec notation.\\n     */\\n    function generateRoute(\\n        IERC20 token0,\\n        IERC20 token1,\\n        address[] memory route\\n    ) private {\\n        require(route.length >= 3, \\\"!route too short\\\");\\n        require(route.length % 2 == 1, \\\"!route has even length\\\");\\n        require(route[0] == address(token0), \\\"!token0 not route beginning\\\");\\n        require(\\n            route[route.length - 1] == address(token1),\\n            \\\"!token1 not route ending\\\"\\n        );\\n        delete routes[token0][token1];\\n\\n        IERC20 from = IERC20(route[0]);\\n        from.balanceOf(address(this)); // validate from\\n\\n        for (uint256 i = 1; i < route.length; i += 2) {\\n            address factory = route[i];\\n            IERC20 to = IERC20(route[i + 1]);\\n            if (factory == address(0)) {\\n                require(\\n                    routes[from][to].length > 0,\\n                    \\\"!swap subroute not created yet\\\"\\n                );\\n                routes[token0][token1].push(\\n                    RouteStep({\\n                        from: from,\\n                        pair: IUniswapV2Pair(address(0)),\\n                        to: to,\\n                        amountsOutNominator: 0,\\n                        amountsOutDenominator: 0\\n                    })\\n                );\\n            } else {\\n                require(\\n                    factorySet.contains(factory),\\n                    \\\"!factory does not exist\\\"\\n                );\\n                address pairAddress = IUniswapV2Factory(factory).getPair(\\n                    address(from),\\n                    address(to)\\n                );\\n                require(pairAddress != address(0), \\\"pair does not exist\\\");\\n                routes[token0][token1].push(\\n                    RouteStep({\\n                        from: from,\\n                        pair: IUniswapV2Pair(pairAddress),\\n                        to: to,\\n                        amountsOutNominator: factories[factory]\\n                            .amountsOutNominator,\\n                        amountsOutDenominator: factories[factory]\\n                            .amountsOutDenominator\\n                    })\\n                );\\n            }\\n\\n            from = to;\\n        }\\n    }\\n\\n    /// @dev Inverts the stored [`from`, `to`] route and stores this as a new route.\\n    function generateInvertedRoute(IERC20 from, IERC20 to) private {\\n        delete routes[to][from];\\n        uint256 length = routes[from][to].length;\\n        uint256 index;\\n        RouteStep memory step;\\n        for (uint256 i = 0; i < length; i++) {\\n            index = length - 1 - i;\\n            step = routes[from][to][index];\\n            routes[to][from].push(\\n                RouteStep({\\n                    from: step.to,\\n                    pair: step.pair,\\n                    to: step.from,\\n                    amountsOutNominator: step.amountsOutNominator,\\n                    amountsOutDenominator: step.amountsOutDenominator\\n                })\\n            );\\n        }\\n    }\\n\\n    //** TOKEN INFO GENERATION **/\\n\\n    /// @dev Figures out the SwapType (eg. TOKEN_TO_TOKEN) for the token pair and stores it.\\n    /// @dev Calls common UniswapV2Pair functions to guess that the tokens are a pair or not.\\n    function generateSwapType(IERC20 from, IERC20 to)\\n        private\\n        returns (SwapType)\\n    {\\n        bool fromPair = getPair(from);\\n        bool toPair = getPair(to);\\n        SwapType swapType;\\n        if (fromPair) {\\n            swapType = toPair\\n                ? SwapType.PAIR_TO_PAIR\\n                : SwapType.PAIR_TO_TOKEN;\\n        } else {\\n            swapType = toPair\\n                ? SwapType.TOKEN_TO_PAIR\\n                : SwapType.TOKEN_TO_TOKEN;\\n        }\\n        tokenSwapType[from][to] = swapType;\\n        return swapType;\\n    }\\n\\n    /// @dev Returns whether `token` is a pair or not. If it is a pair, stores the pairInfo.\\n    function getPair(IERC20 token) private returns (bool) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(address(token));\\n        try pair.getReserves() {\\n            // get token0\\n            try pair.token0() returns (address token0) {\\n                // get token1\\n                try pair.token1() returns (address token1) {\\n                    pairInfo[token].token0 = IERC20(token0);\\n                    pairInfo[token].token1 = IERC20(token1);\\n                    return true;\\n                } catch {}\\n            } catch {}\\n        } catch {}\\n        return false;\\n    }\\n\\n    //** UTILITIES **/\\n    \\n    /// @dev Uses the Uniswap formula to calculate how many tokens can be taken out given `amountIn`.\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 feeNom,\\n        uint256 feeDenom\\n    ) private pure returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * feeNom;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * feeDenom + amountInWithFee;\\n        unchecked {\\n            return denominator == 0 ? 0 : numerator / denominator;\\n        }\\n    }\\n\\n    /// @dev Returns a dummy step that indactes the token should be pulled from the zapper.\\n    function getFromZapperStep()\\n        private\\n        pure\\n        returns (RouteStep memory)\\n    {\\n        RouteStep memory fromZapper;\\n        return fromZapper;\\n    }\\n\\n    /// @dev Returns a dummy step that indactes the `token` should be pulled from this contract.\\n    function getFromThisContractStep(IERC20 token)\\n        private\\n        pure\\n        returns (RouteStep memory)\\n    {\\n        RouteStep memory fromZapper;\\n        fromZapper.from = IERC20(address(1));\\n        fromZapper.to = token;\\n        return fromZapper;\\n    }\\n\\n    /// @notice Gets a registered factory at a specific index, use factoryLength() for the upper bound.\\n    function getFactory(uint256 index) external view returns (address) {\\n        return factorySet.at(index);\\n    }\\n\\n    /// @notice Returns the total number of registered factories.\\n    function factoryLength() external view returns (uint256) {\\n        return factorySet.length();\\n    }\\n\\n    /// @notice Returns the number of steps on the route from token0 to token1.\\n    function routeLength(IERC20 token0, IERC20 token1)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return routes[token0][token1].length;\\n    }\\n}\\n\",\"keccak256\":\"0x4a0c7d085f01a0a4fc7235f8c4aa262360f78f0abe60aaedf7ec479fa23472f6\",\"license\":\"MIT\"},\"contracts/dependencies/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Derived from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/1b27c13096d6e4389d62e7b0766a1db53fbb3f1b/contracts/access/Ownable.sol\\n// Adds pending owner\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address public pendingOwner;\\n\\n    event PendingOwnershipTransferred(address indexed previousPendingOwner, address indexed newPendingOwner);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to the pendingOwner.\\n     * Can only be called by the pendingOwner.\\n     */\\n    function transferOwnership() public virtual {\\n        require(_msgSender() == pendingOwner, \\\"Ownable: caller is not the pendingOwner\\\");\\n        require(pendingOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Sets the pendingOwner, ownership is only transferred when they call transferOwnership.\\n     * Can only be called by the current owner.\\n     */\\n    function setPendingOwner(address newPendingOwner) external onlyOwner {\\n        address oldPendingOwner = pendingOwner;\\n        pendingOwner = newPendingOwner;\\n\\n        emit PendingOwnershipTransferred(oldPendingOwner, pendingOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        pendingOwner = address(0);\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xfb9f03cd1f1d506e1e180bf5b086049c4820cc9cab2f970218d845d0ad592569\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IZapHandler.sol\\\";\\n\\n/// @notice The IZap interface allows contracts to swap a token for another token without having to directly interact with verbose AMMs directly.\\n/// @notice It furthermore allows to zap to and from an LP pair within a single transaction.\\ninterface IZap {\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Reverts if the `recipient` received less tokens than `minReceived`.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `recipient`.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    * @param minReceived The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.\\n    */\\n    function swapERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount, uint256 minReceived) external returns (uint256 received);\\n\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires approval.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`.\\n    * @param toToken The token that will be bought and sent to the `msg.sender`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function swapERC20Fast(IERC20 fromToken, IERC20 toToken, uint256 amount) external;\\n\\n    /**\\n    * @notice When the implementation calls pullTo while in a swap, the remaining tokens of the `swap` amount will be sent from the swap `msg.sender` to the `to` address chosen by the implementation.\\n    * @notice This amount cannot exceed the amount set in the original swap transaction.\\n    * @notice Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.\\n    * @notice However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\\n    * @dev Can only be called by the implementation.\\n    * @param to The address to send all remaining tokens of the swap to. This is presumably the first AMM pair in the route.\\n    */\\n    function pullTo(address to) external;\\n\\n    /**\\n    * @notice When the implementation calls pullAmountTo while in a swap, `amount` tokens of the `swap` amount will be sent from the swap`msg.sender` to the `to` address chosen by the implementation.\\n    * @notice This amount cannot exceed the amount set in the original swap transaction.\\n    * @notice Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.\\n    * @notice However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens.\\n    * @dev Can only be called by the implementation.\\n    * @param to The address to send `amount` tokens of the swap to. This is presumably the first AMM pair in the route.\\n    * @param amount The amount of tokens to send to the `to` address, cannot exceed the remaining amount indicated by the swap `amount` parameter.\\n    */\\n    function pullAmountTo(address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Sets the underlying implementation that fulfills the swap orders.\\n     * @dev Can only be called by the contract owner.\\n     * @param implementation The new implementation.\\n     */\\n    function setImplementation(IZapHandler implementation) external;\\n}\",\"keccak256\":\"0x47577d52482c11253da0a26807d4120458558e8bf75f722327c8f4729a71ae9d\",\"license\":\"MIT\"},\"contracts/interfaces/IZapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZapHandler {\\n\\n    /**\\n    * @notice Swap `amount` of `fromToken` to `toToken` and send them to the recipient.\\n    * @notice The `fromToken` and `toToken` arguments can be AMM pairs.\\n    * @notice Requires `msg.sender` to be a Zap instance.\\n    * @param fromToken The token to take from `msg.sender` and exchange for `toToken`\\n    * @param toToken The token that will be bought and sent to the recipient.\\n    * @param recipient The destination address to receive the `toToken`.\\n    * @param amount The amount that the zapper should take from the `msg.sender` and swap.\\n    */\\n    function convertERC20(IERC20 fromToken, IERC20 toToken, address recipient, uint256 amount) external;\\n}\",\"keccak256\":\"0xfca6bcc7315fdfa7c3d55339469a1419a1a9a7d364b1c449d8e1aa93365d1531\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200471a3803806200471a8339810160408190526200003491620000b0565b6200003f3362000056565b60016002556200004f8162000056565b50620000e2565b600180546001600160a01b0319908116909155600080546001600160a01b03848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000c357600080fd5b81516001600160a01b0381168114620000db57600080fd5b9392505050565b61462880620000f26000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c806363c6edfa116100b2578063bcbf4c8a11610081578063dc0a422911610066578063dc0a422914610332578063e30c3978146103a0578063fab52689146103c057600080fd5b8063bcbf4c8a1461030c578063c42069ec1461031f57600080fd5b806363c6edfa14610298578063715018a6146102de578063880ad0af146102e65780638da5cb5b146102ee57600080fd5b80634b37c73f116101095780635cadd6d1116100ee5780635cadd6d1146101e9578063600c557d146101fc578063616f62361461025d57600080fd5b80634b37c73f146101c357806355a204f9146101d657600080fd5b8063263409261461013b57806327ce464e146101505780633fc15f1514610163578063470f4985146101ad575b600080fd5b61014e6101493660046140ea565b61046e565b005b61014e61015e366004613fb9565b610504565b6009546101839073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101b56105f4565b6040519081526020016101a4565b61014e6101d1366004613fb9565b610605565b6101836101e4366004614278565b610777565b61014e6101f7366004613ff3565b61078a565b61020f61020a3660046141fb565b610ae0565b6040805173ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152929094169183019190915263ffffffff9081166060830152909116608082015260a0016101a4565b61028b61026b366004614060565b600360209081526000928352604080842090915290825290205460ff1681565b6040516101a491906142ea565b6101b56102a6366004614060565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260086020908152604080832093909416825291909152205490565b61014e610b88565b61014e610c15565b60005473ffffffffffffffffffffffffffffffffffffffff16610183565b61014e61031a366004614099565b610d99565b61014e61032d366004613fb9565b610e9b565b610373610340366004613fb9565b6004602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff918216911682565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016101a4565b6001546101839073ffffffffffffffffffffffffffffffffffffffff1681565b6104356103ce366004613fb9565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff92831660208501529116908201526060016101a4565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104ff838383610f93565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f9071993da430171549ad7f254aef8892d82c06c4611995b307947f8a36baf1cb90600090a250565b6000610600600561109d565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b6106916005826110a7565b6106f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f216578697374730000000000000000000000000000000000000000000000000060448201526064016104eb565b6107026005826110d9565b5073ffffffffffffffffffffffffffffffffffffffff811660008181526007602052604080822080547fffffffff00000000000000000000000000000000000000000000000000000000169055517fafa2737b2090fa39c66b7348625f0c03726240f724defbc6216d679506f944419190a250565b60006107846005836110fb565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b8163ffffffff168163ffffffff161015610881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f216e6f6d203e2064656e6f6d000000000000000000000000000000000000000060448201526064016104eb565b63ffffffff82166108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f217a65726f00000000000000000000000000000000000000000000000000000060448201526064016104eb565b63ffffffff821661090157610901614475565b73ffffffffffffffffffffffffffffffffffffffff831661097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f217a65726f20666163746f72790000000000000000000000000000000000000060448201526064016104eb565b600061098b6005856110a7565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80881680835263ffffffff80891660208086019182528983168688019081526000948552600790915295909220935184549251955182167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff96831674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090941691909416179190911793909316179055909150610a7d90600590869061110716565b506040805163ffffffff8086168252841660208201528215159173ffffffffffffffffffffffffffffffffffffffff8716917f371529b40bbd6a0fdc00ffa2f65512b7ba6152f0c2111608704538c5491c9147910160405180910390a350505050565b60086020528260005260406000206020528160005260406000208181548110610b0857600080fd5b600091825260209091206003909102018054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff918216955091811693508116915063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041685565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b610c136000611129565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e646960448201527f6e674f776e65720000000000000000000000000000000000000000000000000060648201526084016104eb565b60015473ffffffffffffffffffffffffffffffffffffffff16610d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104eb565b600154610c139073ffffffffffffffffffffffffffffffffffffffff16611129565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260036020908152604080832093871683529290529081205460ff1690816004811115610de457610de4614502565b1415610df757610df485856111a8565b90505b6001816004811115610e0b57610e0b614502565b1415610e2257610e1d8585858561126e565b610e94565b6002816004811115610e3657610e36614502565b1415610e4857610e1d858585856112d8565b6003816004811115610e5c57610e5c614502565b1415610e6e57610e1d85858585611930565b6004816004811115610e8257610e82614502565b1415610e9457610e9485858585611db1565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600860209081526040808320938616835292905220541515610fd3848484611e39565b8015158373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f4543854d4a9097d1b702bd5734d0a5a2834070931096c2a7a0d326bb34f71e5660405160405180910390a461103a848461272d565b8015158473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f4543854d4a9097d1b702bd5734d0a5a2834070931096c2a7a0d326bb34f71e5660405160405180910390a450505050565b6000610784825490565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415155b9392505050565b60006110d28373ffffffffffffffffffffffffffffffffffffffff8416612c04565b60006110d28383612cf7565b60006110d28373ffffffffffffffffffffffffffffffffffffffff8416612d21565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556000805473ffffffffffffffffffffffffffffffffffffffff848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806111b484612d70565b905060006111c184612d70565b9050600082156111e157816111d75760036111da565b60045b90506111f3565b816111ed5760016111f0565b60025b90505b73ffffffffffffffffffffffffffffffffffffffff808716600090815260036020908152604080832093891683529290522080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600481111561126057611260614502565b021790555095945050505050565b6040805160a080820183526000808352602080840182905283850182905260608085018390526080948501839052855193840186528284529083018290529382018190529281018390529081018290526112ca90868685612fc7565b9050610e94818460006132b9565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832081518083019092528054851682526001015490931690830152611325600284614394565b9050600061133382856143e5565b9050826000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156113e2576040517f5188d10d000000000000000000000000000000000000000000000000000000008152306004820152602481018390523390635188d10d90604401600060405180830381600087803b1580156113c557600080fd5b505af11580156113d9573d6000803e3d6000fd5b5050505061144f565b6040805160a080820183526000808352602080840182905283850182905260608085018390526080948501839052855193840186528284529083018290529382018190529281018390529081018290526114409085518a9086612fc7565b905061144d8130856132b9565b505b826020015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156114fc576040517f5188d10d000000000000000000000000000000000000000000000000000000008152306004820152602481018290523390635188d10d90604401600060405180830381600087803b1580156114df57600080fd5b505af11580156114f3573d6000803e3d6000fd5b5050505061156b565b6040805160a0808201835260008083526020808401829052838501829052606080850183905260809485018390528551938401865282845290830182905293820181905292810183905290810182905261155c9089866020015185612fc7565b90506115698130846132b9565b505b82516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156115d457600080fd5b505afa1580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160c9190614291565b60208501516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561167d57600080fd5b505afa158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190614291565b90506000808973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611738919061423c565b506dffffffffffffffffffffffffffff91821693501690508360008361175e84846143a8565b6117689190614394565b90508481111561178d578261177d85876143a8565b6117879190614394565b91508490505b88516117b09073ffffffffffffffffffffffffffffffffffffffff168d84613896565b60208901516117d69073ffffffffffffffffffffffffffffffffffffffff168d83613896565b858210156118295761182961180060005473ffffffffffffffffffffffffffffffffffffffff1690565b61180a84896143e5565b8b5173ffffffffffffffffffffffffffffffffffffffff169190613896565b8481101561187f5761187f61185360005473ffffffffffffffffffffffffffffffffffffffff1690565b61185d83886143e5565b60208c015173ffffffffffffffffffffffffffffffffffffffff169190613896565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301528d1690636a62784290602401602060405180830381600087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614291565b5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260046020818152604092839020835180850185528154871681526001909101549095169085015290517f5188d10d00000000000000000000000000000000000000000000000000000000815290810191909152602481018390523390635188d10d90604401600060405180830381600087803b1580156119cc57600080fd5b505af11580156119e0573d6000803e3d6000fd5b50506040517f89afcb4400000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff881692506389afcb4491506024016040805180830381600087803b158015611a4a57600080fd5b505af1158015611a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8291906142aa565b505080516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015611aed57600080fd5b505afa158015611b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b259190614291565b90508473ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415611b8557611b8073ffffffffffffffffffffffffffffffffffffffff86168583613896565b611c0f565b81516040805160a080820183526000808352602080840182905283850182905260608085018390526080948501839052855193840186529483018290529382018190529181018290526001815273ffffffffffffffffffffffffffffffffffffffff9093169183019190915290611bff9084518885612fc7565b9050611c0d818660006132b9565b505b60208201516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015611c7b57600080fd5b505afa158015611c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb39190614291565b90508573ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff161415611d1357611d0e73ffffffffffffffffffffffffffffffffffffffff87168683613896565b611da8565b6000611d98611d8c85602001516040805160a08082018352600080835260208084018290528385018290526060808501839052608094850183905285519384018652948301829052938201819052918101919091526001815273ffffffffffffffffffffffffffffffffffffffff929092169082015290565b85602001518985612fc7565b9050611da6818760006132b9565b505b50505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f756e696d706c656d656e74656420666561747572653a207061697220746f207060448201527f61697220726f7574696e6700000000000000000000000000000000000000000060648201526084016104eb565b600381511015611ea5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f21726f75746520746f6f2073686f72740000000000000000000000000000000060448201526064016104eb565b60028151611eb39190614461565b600114611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f21726f75746520686173206576656e206c656e6774680000000000000000000060448201526064016104eb565b8273ffffffffffffffffffffffffffffffffffffffff1681600081518110611f4657611f46614560565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614611fcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f21746f6b656e30206e6f7420726f75746520626567696e6e696e67000000000060448201526064016104eb565b8173ffffffffffffffffffffffffffffffffffffffff168160018351611ff191906143e5565b8151811061200157612001614560565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f21746f6b656e31206e6f7420726f75746520656e64696e67000000000000000060448201526064016104eb565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260086020908152604080832093861683529290529081206120c391613ef5565b6000816000815181106120d8576120d8614560565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a082319060240160206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190614291565b5060015b8251811015610e945760008382815181106121a4576121a4614560565b602002602001015190506000848360016121be919061437c565b815181106121ce576121ce614560565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156124045773ffffffffffffffffffffffffffffffffffffffff8085166000908152600860209081526040808320938516835292905220546122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f217377617020737562726f757465206e6f74206372656174656420796574000060448201526064016104eb565b73ffffffffffffffffffffffffffffffffffffffff87811660009081526008602090815260408083208a851684528252808320815160a08101835289861681528686168185019081529281018581526060820186815260808301878152845460018082018755958952969097209251600390960290920180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169689169690961781559351928401805490951692871692909217909355516002909101805492519351919094167fffffffffffffffff000000000000000000000000000000000000000000000000909216919091177401000000000000000000000000000000000000000063ffffffff93841602177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055612717565b61240f6005836110a7565b612475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f21666163746f727920646f6573206e6f7420657869737400000000000000000060448201526064016104eb565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282811660248301526000919084169063e6a439059060440160206040518083038186803b1580156124e857600080fd5b505afa1580156124fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125209190613fd6565b905073ffffffffffffffffffffffffffffffffffffffff811661259f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7061697220646f6573206e6f742065786973740000000000000000000000000060448201526064016104eb565b73ffffffffffffffffffffffffffffffffffffffff80891660009081526008602090815260408083208b851684528252808320815160a0810183528a86168152878616818501908152968616818401908152898716865260078086529386205463ffffffff74010000000000000000000000000000000000000000808304821660608601908152968852780100000000000000000000000000000000000000000000000092839004821660808601908152865460018181018955978b5298909920945160039098029094018054978a167fffffffffffffffffffffffff00000000000000000000000000000000000000009889161781559951948a018054958a16959097169490941790955551600290970180549351955183169094027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff95909216027fffffffffffffffff000000000000000000000000000000000000000000000000909216959094169490941793909317161790555b9250612726905060028261437c565b9050612187565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600860209081526040808320938616835292905290812061276a91613ef5565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600860209081526040808320938516835292815282822054835160a081018552838152918201839052928101829052606081018290526080810182905260005b83811015612bfc57806127db6001866143e5565b6127e591906143e5565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600860209081526040808320938a168352929052208054919450908490811061282d5761282d614560565b90600052602060002090600302016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509150600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405280846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846000015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff168152602001846060015163ffffffff168152602001846080015163ffffffff16815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555050508080612bf490614428565b9150506127c7565b505050505050565b60008181526001830160205260408120548015612ced576000612c286001836143e5565b8554909150600090612c3c906001906143e5565b9050818114612ca1576000866000018281548110612c5c57612c5c614560565b9060005260206000200154905080876000018481548110612c7f57612c7f614560565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612cb257612cb2614531565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610784565b6000915050610784565b6000826000018281548110612d0e57612d0e614560565b9060005260206000200154905092915050565b6000818152600183016020526040812054612d6857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610784565b506000610784565b6000808290508073ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612dbc57600080fd5b505afa925050508015612e0a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612e079181019061423c565b60015b612e1357612fbe565b5050508073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612e5c57600080fd5b505afa925050508015612eaa575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612ea791810190613fd6565b60015b612eb357612fbe565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef957600080fd5b505afa925050508015612f47575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612f4491810190613fd6565b60015b612f5057612fbc565b73ffffffffffffffffffffffffffffffffffffffff948516600090815260046020526040902080549286167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416178155600190810180549290961691909216179093555090919050565b505b50600092915050565b6040805160a08101825260008082526020808301829052828401829052606083018290526080830182905273ffffffffffffffffffffffffffffffffffffffff878116835260088252848320908716835281528382208054855181840281018401909652808652939492939091849084015b828210156130eb5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925263ffffffff74010000000000000000000000000000000000000000830481166060850152780100000000000000000000000000000000000000000000000090920490911660808301529083529092019101613039565b50505050905080516000141561320a576131058585613923565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600860209081526040808320938816835292815282822080548451818402810184019095528085529092909184015b828210156132035760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925263ffffffff74010000000000000000000000000000000000000000830481166060850152780100000000000000000000000000000000000000000000000090920490911660808301529083529092019101613151565b5050505090505b60005b81518110156132ae57600082828151811061322a5761322a614560565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16141561328857613281888260000151836020015188612fc7565b975061329b565b613297888260400151876132b9565b8097505b50806132a681614428565b91505061320d565b509495945050505050565b825173ffffffffffffffffffffffffffffffffffffffff16613357576040517f5188d10d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602481018290523390635188d10d90604401600060405180830381600087803b15801561334357600080fd5b505af1158015611da8573d6000803e3d6000fd5b825173ffffffffffffffffffffffffffffffffffffffff16600114156134425760208301516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526104ff91849173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156133e857600080fd5b505afa1580156133fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134209190614291565b602086015173ffffffffffffffffffffffffffffffffffffffff169190613896565b826020015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1610156136a557600080846040015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156134cb57600080fd5b505afa1580156134df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613503919061423c565b50865160408089015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff9485169650929093169350849216906370a082319060240160206040518083038186803b15801561358d57600080fd5b505afa1580156135a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c59190614291565b6135cf91906143e5565b925060006135f4848484896060015163ffffffff168a6080015163ffffffff16613b9e565b60408088015190517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905273ffffffffffffffffffffffffffffffffffffffff898116604484015260806064840152608483019190915292935091169063022c0d9f9060a4015b600060405180830381600087803b15801561368557600080fd5b505af1158015613699573d6000803e3d6000fd5b50505050505050505050565b600080846040015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156136f257600080fd5b505afa158015613706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372a919061423c565b50865160408089015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff9485169650929093169350839216906370a082319060240160206040518083038186803b1580156137b457600080fd5b505afa1580156137c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ec9190614291565b6137f691906143e5565b9250600061381b848385896060015163ffffffff168a6080015163ffffffff16613b9e565b60408088015190517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810183905260006024820181905273ffffffffffffffffffffffffffffffffffffffff898116604484015260806064840152608483019190915292935091169063022c0d9f9060a40161366b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526104ff908490613bff565b60095473ffffffffffffffffffffffffffffffffffffffff908116908316811480159061397c57508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6139e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f216e6f20726f75746520666f756e64000000000000000000000000000000000060448201526064016104eb565b60408051600580825260c082019092526000916020820160a0803683370190505090508381600081518110613a1957613a19614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600081600181518110613a6857613a68614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110613ab657613ab6614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600081600381518110613b0557613b05614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600481518110613b5357613b53614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613b98848483610f93565b50505050565b600080613bab84886143a8565b90506000613bb986836143a8565b9050600082613bc8868a6143a8565b613bd2919061437c565b90508015613bef57808281613be957613be96144d3565b04613bf2565b60005b9998505050505050505050565b6000613c61826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d0b9092919063ffffffff16565b8051909150156104ff5780806020019051810190613c7f919061403e565b6104ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104eb565b6060613d1a8484600085613d22565b949350505050565b606082471015613db4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104eb565b843b613e1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104eb565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e4591906142ce565b60006040518083038185875af1925050503d8060008114613e82576040519150601f19603f3d011682016040523d82523d6000602084013e613e87565b606091505b5091509150613e97828286613ea2565b979650505050505050565b60608315613eb15750816110d2565b825115613ec15782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb919061432b565b5080546000825560030290600052602060002090810190613f169190613f19565b50565b5b80821115613f875780547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825560018201805490911690556002810180547fffffffff00000000000000000000000000000000000000000000000000000000169055600301613f1a565b5090565b8035613f96816145be565b919050565b80516dffffffffffffffffffffffffffff81168114613f9657600080fd5b600060208284031215613fcb57600080fd5b81356110d2816145be565b600060208284031215613fe857600080fd5b81516110d2816145be565b60008060006060848603121561400857600080fd5b8335614013816145be565b92506020840135614023816145e0565b91506040840135614033816145e0565b809150509250925092565b60006020828403121561405057600080fd5b815180151581146110d257600080fd5b6000806040838503121561407357600080fd5b823561407e816145be565b9150602083013561408e816145be565b809150509250929050565b600080600080608085870312156140af57600080fd5b84356140ba816145be565b935060208501356140ca816145be565b925060408501356140da816145be565b9396929550929360600135925050565b6000806000606084860312156140ff57600080fd5b833561410a816145be565b925060208481013561411b816145be565b9250604085013567ffffffffffffffff8082111561413857600080fd5b818701915087601f83011261414c57600080fd5b81358181111561415e5761415e61458f565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156141a1576141a161458f565b604052828152858101935084860182860187018c10156141c057600080fd5b600095505b838610156141ea576141d681613f8b565b8552600195909501949386019386016141c5565b508096505050505050509250925092565b60008060006060848603121561421057600080fd5b833561421b816145be565b9250602084013561422b816145be565b929592945050506040919091013590565b60008060006060848603121561425157600080fd5b61425a84613f9b565b925061426860208501613f9b565b91506040840151614033816145e0565b60006020828403121561428a57600080fd5b5035919050565b6000602082840312156142a357600080fd5b5051919050565b600080604083850312156142bd57600080fd5b505080516020909101519092909150565b600082516142e08184602087016143fc565b9190910192915050565b6020810160058310614325577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b602081526000825180602084015261434a8160408501602087016143fc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561438f5761438f6144a4565b500190565b6000826143a3576143a36144d3565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143e0576143e06144a4565b500290565b6000828210156143f7576143f76144a4565b500390565b60005b838110156144175781810151838201526020016143ff565b83811115613b985750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561445a5761445a6144a4565b5060010190565b600082614470576144706144d3565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613f1657600080fd5b63ffffffff81168114613f1657600080fdfea264697066735822122092766d55667798af186e0af93aebed3b9a68a8359b989913a894f1b70d413de964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c806363c6edfa116100b2578063bcbf4c8a11610081578063dc0a422911610066578063dc0a422914610332578063e30c3978146103a0578063fab52689146103c057600080fd5b8063bcbf4c8a1461030c578063c42069ec1461031f57600080fd5b806363c6edfa14610298578063715018a6146102de578063880ad0af146102e65780638da5cb5b146102ee57600080fd5b80634b37c73f116101095780635cadd6d1116100ee5780635cadd6d1146101e9578063600c557d146101fc578063616f62361461025d57600080fd5b80634b37c73f146101c357806355a204f9146101d657600080fd5b8063263409261461013b57806327ce464e146101505780633fc15f1514610163578063470f4985146101ad575b600080fd5b61014e6101493660046140ea565b61046e565b005b61014e61015e366004613fb9565b610504565b6009546101839073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101b56105f4565b6040519081526020016101a4565b61014e6101d1366004613fb9565b610605565b6101836101e4366004614278565b610777565b61014e6101f7366004613ff3565b61078a565b61020f61020a3660046141fb565b610ae0565b6040805173ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152929094169183019190915263ffffffff9081166060830152909116608082015260a0016101a4565b61028b61026b366004614060565b600360209081526000928352604080842090915290825290205460ff1681565b6040516101a491906142ea565b6101b56102a6366004614060565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260086020908152604080832093909416825291909152205490565b61014e610b88565b61014e610c15565b60005473ffffffffffffffffffffffffffffffffffffffff16610183565b61014e61031a366004614099565b610d99565b61014e61032d366004613fb9565b610e9b565b610373610340366004613fb9565b6004602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff918216911682565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016101a4565b6001546101839073ffffffffffffffffffffffffffffffffffffffff1681565b6104356103ce366004613fb9565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff92831660208501529116908201526060016101a4565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104ff838383610f93565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f9071993da430171549ad7f254aef8892d82c06c4611995b307947f8a36baf1cb90600090a250565b6000610600600561109d565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff163314610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b6106916005826110a7565b6106f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f216578697374730000000000000000000000000000000000000000000000000060448201526064016104eb565b6107026005826110d9565b5073ffffffffffffffffffffffffffffffffffffffff811660008181526007602052604080822080547fffffffff00000000000000000000000000000000000000000000000000000000169055517fafa2737b2090fa39c66b7348625f0c03726240f724defbc6216d679506f944419190a250565b60006107846005836110fb565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b8163ffffffff168163ffffffff161015610881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f216e6f6d203e2064656e6f6d000000000000000000000000000000000000000060448201526064016104eb565b63ffffffff82166108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f217a65726f00000000000000000000000000000000000000000000000000000060448201526064016104eb565b63ffffffff821661090157610901614475565b73ffffffffffffffffffffffffffffffffffffffff831661097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f217a65726f20666163746f72790000000000000000000000000000000000000060448201526064016104eb565b600061098b6005856110a7565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80881680835263ffffffff80891660208086019182528983168688019081526000948552600790915295909220935184549251955182167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff96831674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090941691909416179190911793909316179055909150610a7d90600590869061110716565b506040805163ffffffff8086168252841660208201528215159173ffffffffffffffffffffffffffffffffffffffff8716917f371529b40bbd6a0fdc00ffa2f65512b7ba6152f0c2111608704538c5491c9147910160405180910390a350505050565b60086020528260005260406000206020528160005260406000208181548110610b0857600080fd5b600091825260209091206003909102018054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff918216955091811693508116915063ffffffff740100000000000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041685565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b610c136000611129565b565b60015473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f776e61626c653a2063616c6c6572206973206e6f74207468652070656e646960448201527f6e674f776e65720000000000000000000000000000000000000000000000000060648201526084016104eb565b60015473ffffffffffffffffffffffffffffffffffffffff16610d77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104eb565b600154610c139073ffffffffffffffffffffffffffffffffffffffff16611129565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260036020908152604080832093871683529290529081205460ff1690816004811115610de457610de4614502565b1415610df757610df485856111a8565b90505b6001816004811115610e0b57610e0b614502565b1415610e2257610e1d8585858561126e565b610e94565b6002816004811115610e3657610e36614502565b1415610e4857610e1d858585856112d8565b6003816004811115610e5c57610e5c614502565b1415610e6e57610e1d85858585611930565b6004816004811115610e8257610e82614502565b1415610e9457610e9485858585611db1565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104eb565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f1e1c2f9f5b763f63f56cae5a9a406c263521f324917ae0fe29e5cf9955e81ec890600090a35050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600860209081526040808320938616835292905220541515610fd3848484611e39565b8015158373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f4543854d4a9097d1b702bd5734d0a5a2834070931096c2a7a0d326bb34f71e5660405160405180910390a461103a848461272d565b8015158473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f4543854d4a9097d1b702bd5734d0a5a2834070931096c2a7a0d326bb34f71e5660405160405180910390a450505050565b6000610784825490565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415155b9392505050565b60006110d28373ffffffffffffffffffffffffffffffffffffffff8416612c04565b60006110d28383612cf7565b60006110d28373ffffffffffffffffffffffffffffffffffffffff8416612d21565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556000805473ffffffffffffffffffffffffffffffffffffffff848116938216841783556040519116929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806111b484612d70565b905060006111c184612d70565b9050600082156111e157816111d75760036111da565b60045b90506111f3565b816111ed5760016111f0565b60025b90505b73ffffffffffffffffffffffffffffffffffffffff808716600090815260036020908152604080832093891683529290522080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600481111561126057611260614502565b021790555095945050505050565b6040805160a080820183526000808352602080840182905283850182905260608085018390526080948501839052855193840186528284529083018290529382018190529281018390529081018290526112ca90868685612fc7565b9050610e94818460006132b9565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832081518083019092528054851682526001015490931690830152611325600284614394565b9050600061133382856143e5565b9050826000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156113e2576040517f5188d10d000000000000000000000000000000000000000000000000000000008152306004820152602481018390523390635188d10d90604401600060405180830381600087803b1580156113c557600080fd5b505af11580156113d9573d6000803e3d6000fd5b5050505061144f565b6040805160a080820183526000808352602080840182905283850182905260608085018390526080948501839052855193840186528284529083018290529382018190529281018390529081018290526114409085518a9086612fc7565b905061144d8130856132b9565b505b826020015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156114fc576040517f5188d10d000000000000000000000000000000000000000000000000000000008152306004820152602481018290523390635188d10d90604401600060405180830381600087803b1580156114df57600080fd5b505af11580156114f3573d6000803e3d6000fd5b5050505061156b565b6040805160a0808201835260008083526020808401829052838501829052606080850183905260809485018390528551938401865282845290830182905293820181905292810183905290810182905261155c9089866020015185612fc7565b90506115698130846132b9565b505b82516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156115d457600080fd5b505afa1580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160c9190614291565b60208501516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561167d57600080fd5b505afa158015611691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b59190614291565b90506000808973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611738919061423c565b506dffffffffffffffffffffffffffff91821693501690508360008361175e84846143a8565b6117689190614394565b90508481111561178d578261177d85876143a8565b6117879190614394565b91508490505b88516117b09073ffffffffffffffffffffffffffffffffffffffff168d84613896565b60208901516117d69073ffffffffffffffffffffffffffffffffffffffff168d83613896565b858210156118295761182961180060005473ffffffffffffffffffffffffffffffffffffffff1690565b61180a84896143e5565b8b5173ffffffffffffffffffffffffffffffffffffffff169190613896565b8481101561187f5761187f61185360005473ffffffffffffffffffffffffffffffffffffffff1690565b61185d83886143e5565b60208c015173ffffffffffffffffffffffffffffffffffffffff169190613896565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301528d1690636a62784290602401602060405180830381600087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614291565b5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260046020818152604092839020835180850185528154871681526001909101549095169085015290517f5188d10d00000000000000000000000000000000000000000000000000000000815290810191909152602481018390523390635188d10d90604401600060405180830381600087803b1580156119cc57600080fd5b505af11580156119e0573d6000803e3d6000fd5b50506040517f89afcb4400000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff881692506389afcb4491506024016040805180830381600087803b158015611a4a57600080fd5b505af1158015611a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8291906142aa565b505080516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015611aed57600080fd5b505afa158015611b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b259190614291565b90508473ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415611b8557611b8073ffffffffffffffffffffffffffffffffffffffff86168583613896565b611c0f565b81516040805160a080820183526000808352602080840182905283850182905260608085018390526080948501839052855193840186529483018290529382018190529181018290526001815273ffffffffffffffffffffffffffffffffffffffff9093169183019190915290611bff9084518885612fc7565b9050611c0d818660006132b9565b505b60208201516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015611c7b57600080fd5b505afa158015611c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb39190614291565b90508573ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff161415611d1357611d0e73ffffffffffffffffffffffffffffffffffffffff87168683613896565b611da8565b6000611d98611d8c85602001516040805160a08082018352600080835260208084018290528385018290526060808501839052608094850183905285519384018652948301829052938201819052918101919091526001815273ffffffffffffffffffffffffffffffffffffffff929092169082015290565b85602001518985612fc7565b9050611da6818760006132b9565b505b50505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f756e696d706c656d656e74656420666561747572653a207061697220746f207060448201527f61697220726f7574696e6700000000000000000000000000000000000000000060648201526084016104eb565b600381511015611ea5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f21726f75746520746f6f2073686f72740000000000000000000000000000000060448201526064016104eb565b60028151611eb39190614461565b600114611f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f21726f75746520686173206576656e206c656e6774680000000000000000000060448201526064016104eb565b8273ffffffffffffffffffffffffffffffffffffffff1681600081518110611f4657611f46614560565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614611fcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f21746f6b656e30206e6f7420726f75746520626567696e6e696e67000000000060448201526064016104eb565b8173ffffffffffffffffffffffffffffffffffffffff168160018351611ff191906143e5565b8151811061200157612001614560565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f21746f6b656e31206e6f7420726f75746520656e64696e67000000000000000060448201526064016104eb565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260086020908152604080832093861683529290529081206120c391613ef5565b6000816000815181106120d8576120d8614560565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a082319060240160206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190614291565b5060015b8251811015610e945760008382815181106121a4576121a4614560565b602002602001015190506000848360016121be919061437c565b815181106121ce576121ce614560565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156124045773ffffffffffffffffffffffffffffffffffffffff8085166000908152600860209081526040808320938516835292905220546122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f217377617020737562726f757465206e6f74206372656174656420796574000060448201526064016104eb565b73ffffffffffffffffffffffffffffffffffffffff87811660009081526008602090815260408083208a851684528252808320815160a08101835289861681528686168185019081529281018581526060820186815260808301878152845460018082018755958952969097209251600390960290920180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169689169690961781559351928401805490951692871692909217909355516002909101805492519351919094167fffffffffffffffff000000000000000000000000000000000000000000000000909216919091177401000000000000000000000000000000000000000063ffffffff93841602177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055612717565b61240f6005836110a7565b612475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f21666163746f727920646f6573206e6f7420657869737400000000000000000060448201526064016104eb565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282811660248301526000919084169063e6a439059060440160206040518083038186803b1580156124e857600080fd5b505afa1580156124fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125209190613fd6565b905073ffffffffffffffffffffffffffffffffffffffff811661259f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7061697220646f6573206e6f742065786973740000000000000000000000000060448201526064016104eb565b73ffffffffffffffffffffffffffffffffffffffff80891660009081526008602090815260408083208b851684528252808320815160a0810183528a86168152878616818501908152968616818401908152898716865260078086529386205463ffffffff74010000000000000000000000000000000000000000808304821660608601908152968852780100000000000000000000000000000000000000000000000092839004821660808601908152865460018181018955978b5298909920945160039098029094018054978a167fffffffffffffffffffffffff00000000000000000000000000000000000000009889161781559951948a018054958a16959097169490941790955551600290970180549351955183169094027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff95909216027fffffffffffffffff000000000000000000000000000000000000000000000000909216959094169490941793909317161790555b9250612726905060028261437c565b9050612187565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600860209081526040808320938616835292905290812061276a91613ef5565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600860209081526040808320938516835292815282822054835160a081018552838152918201839052928101829052606081018290526080810182905260005b83811015612bfc57806127db6001866143e5565b6127e591906143e5565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600860209081526040808320938a168352929052208054919450908490811061282d5761282d614560565b90600052602060002090600302016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509150600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405280846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846000015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff168152602001846060015163ffffffff168152602001846080015163ffffffff16815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555050508080612bf490614428565b9150506127c7565b505050505050565b60008181526001830160205260408120548015612ced576000612c286001836143e5565b8554909150600090612c3c906001906143e5565b9050818114612ca1576000866000018281548110612c5c57612c5c614560565b9060005260206000200154905080876000018481548110612c7f57612c7f614560565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612cb257612cb2614531565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610784565b6000915050610784565b6000826000018281548110612d0e57612d0e614560565b9060005260206000200154905092915050565b6000818152600183016020526040812054612d6857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610784565b506000610784565b6000808290508073ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612dbc57600080fd5b505afa925050508015612e0a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612e079181019061423c565b60015b612e1357612fbe565b5050508073ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612e5c57600080fd5b505afa925050508015612eaa575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612ea791810190613fd6565b60015b612eb357612fbe565b8173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef957600080fd5b505afa925050508015612f47575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612f4491810190613fd6565b60015b612f5057612fbc565b73ffffffffffffffffffffffffffffffffffffffff948516600090815260046020526040902080549286167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416178155600190810180549290961691909216179093555090919050565b505b50600092915050565b6040805160a08101825260008082526020808301829052828401829052606083018290526080830182905273ffffffffffffffffffffffffffffffffffffffff878116835260088252848320908716835281528382208054855181840281018401909652808652939492939091849084015b828210156130eb5760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925263ffffffff74010000000000000000000000000000000000000000830481166060850152780100000000000000000000000000000000000000000000000090920490911660808301529083529092019101613039565b50505050905080516000141561320a576131058585613923565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600860209081526040808320938816835292815282822080548451818402810184019095528085529092909184015b828210156132035760008481526020908190206040805160a08101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff90811684526001808301548216858701526002909201549081169284019290925263ffffffff74010000000000000000000000000000000000000000830481166060850152780100000000000000000000000000000000000000000000000090920490911660808301529083529092019101613151565b5050505090505b60005b81518110156132ae57600082828151811061322a5761322a614560565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16141561328857613281888260000151836020015188612fc7565b975061329b565b613297888260400151876132b9565b8097505b50806132a681614428565b91505061320d565b509495945050505050565b825173ffffffffffffffffffffffffffffffffffffffff16613357576040517f5188d10d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602481018290523390635188d10d90604401600060405180830381600087803b15801561334357600080fd5b505af1158015611da8573d6000803e3d6000fd5b825173ffffffffffffffffffffffffffffffffffffffff16600114156134425760208301516040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526104ff91849173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156133e857600080fd5b505afa1580156133fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134209190614291565b602086015173ffffffffffffffffffffffffffffffffffffffff169190613896565b826020015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1610156136a557600080846040015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156134cb57600080fd5b505afa1580156134df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613503919061423c565b50865160408089015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff9485169650929093169350849216906370a082319060240160206040518083038186803b15801561358d57600080fd5b505afa1580156135a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c59190614291565b6135cf91906143e5565b925060006135f4848484896060015163ffffffff168a6080015163ffffffff16613b9e565b60408088015190517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820184905273ffffffffffffffffffffffffffffffffffffffff898116604484015260806064840152608483019190915292935091169063022c0d9f9060a4015b600060405180830381600087803b15801561368557600080fd5b505af1158015613699573d6000803e3d6000fd5b50505050505050505050565b600080846040015173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156136f257600080fd5b505afa158015613706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372a919061423c565b50865160408089015190517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526dffffffffffffffffffffffffffff9485169650929093169350839216906370a082319060240160206040518083038186803b1580156137b457600080fd5b505afa1580156137c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ec9190614291565b6137f691906143e5565b9250600061381b848385896060015163ffffffff168a6080015163ffffffff16613b9e565b60408088015190517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810183905260006024820181905273ffffffffffffffffffffffffffffffffffffffff898116604484015260806064840152608483019190915292935091169063022c0d9f9060a40161366b565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526104ff908490613bff565b60095473ffffffffffffffffffffffffffffffffffffffff908116908316811480159061397c57508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b6139e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f216e6f20726f75746520666f756e64000000000000000000000000000000000060448201526064016104eb565b60408051600580825260c082019092526000916020820160a0803683370190505090508381600081518110613a1957613a19614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600081600181518110613a6857613a68614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600281518110613ab657613ab6614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600081600381518110613b0557613b05614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600481518110613b5357613b53614560565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613b98848483610f93565b50505050565b600080613bab84886143a8565b90506000613bb986836143a8565b9050600082613bc8868a6143a8565b613bd2919061437c565b90508015613bef57808281613be957613be96144d3565b04613bf2565b60005b9998505050505050505050565b6000613c61826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613d0b9092919063ffffffff16565b8051909150156104ff5780806020019051810190613c7f919061403e565b6104ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104eb565b6060613d1a8484600085613d22565b949350505050565b606082471015613db4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016104eb565b843b613e1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104eb565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613e4591906142ce565b60006040518083038185875af1925050503d8060008114613e82576040519150601f19603f3d011682016040523d82523d6000602084013e613e87565b606091505b5091509150613e97828286613ea2565b979650505050505050565b60608315613eb15750816110d2565b825115613ec15782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb919061432b565b5080546000825560030290600052602060002090810190613f169190613f19565b50565b5b80821115613f875780547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825560018201805490911690556002810180547fffffffff00000000000000000000000000000000000000000000000000000000169055600301613f1a565b5090565b8035613f96816145be565b919050565b80516dffffffffffffffffffffffffffff81168114613f9657600080fd5b600060208284031215613fcb57600080fd5b81356110d2816145be565b600060208284031215613fe857600080fd5b81516110d2816145be565b60008060006060848603121561400857600080fd5b8335614013816145be565b92506020840135614023816145e0565b91506040840135614033816145e0565b809150509250925092565b60006020828403121561405057600080fd5b815180151581146110d257600080fd5b6000806040838503121561407357600080fd5b823561407e816145be565b9150602083013561408e816145be565b809150509250929050565b600080600080608085870312156140af57600080fd5b84356140ba816145be565b935060208501356140ca816145be565b925060408501356140da816145be565b9396929550929360600135925050565b6000806000606084860312156140ff57600080fd5b833561410a816145be565b925060208481013561411b816145be565b9250604085013567ffffffffffffffff8082111561413857600080fd5b818701915087601f83011261414c57600080fd5b81358181111561415e5761415e61458f565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156141a1576141a161458f565b604052828152858101935084860182860187018c10156141c057600080fd5b600095505b838610156141ea576141d681613f8b565b8552600195909501949386019386016141c5565b508096505050505050509250925092565b60008060006060848603121561421057600080fd5b833561421b816145be565b9250602084013561422b816145be565b929592945050506040919091013590565b60008060006060848603121561425157600080fd5b61425a84613f9b565b925061426860208501613f9b565b91506040840151614033816145e0565b60006020828403121561428a57600080fd5b5035919050565b6000602082840312156142a357600080fd5b5051919050565b600080604083850312156142bd57600080fd5b505080516020909101519092909150565b600082516142e08184602087016143fc565b9190910192915050565b6020810160058310614325577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b602081526000825180602084015261434a8160408501602087016143fc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561438f5761438f6144a4565b500190565b6000826143a3576143a36144d3565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143e0576143e06144a4565b500290565b6000828210156143f7576143f76144a4565b500390565b60005b838110156144175781810151838201526020016143ff565b83811115613b985750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561445a5761445a6144a4565b5060010190565b600082614470576144706144d3565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114613f1657600080fd5b63ffffffff81168114613f1657600080fdfea264697066735822122092766d55667798af186e0af93aebed3b9a68a8359b989913a894f1b70d413de964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertERC20(address,address,address,uint256)": {
        "details": "Switches over the different routing types to let the specific handler functions take care of them.",
        "params": {
          "amount": "The amount that the zapper should take from the `msg.sender` and swap.",
          "fromToken": "The token to take from `msg.sender` and exchange for `toToken`.",
          "recipient": "The destination address to receive the `toToken`.",
          "toToken": "The token that will be bought and sent to the recipient."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFactory(address,uint32,uint32)": {
        "details": "Adds a factory to the list of registered factories that can be used within RouteSpec."
      },
      "setMainToken(address)": {
        "details": "Updates the main token, this is used for automatic route tunneling."
      },
      "setPendingOwner(address)": {
        "details": "Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner."
      },
      "setRoute(address,address,address[])": {
        "params": {
          "from": "the token to swap from.",
          "inputRoute": "A route in RouteSpec notation indicating the swap steps and the uniswap like factories these swaps should be made.",
          "to": "the token to swap to."
        }
      },
      "transferOwnership()": {
        "details": "Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner."
      }
    },
    "stateVariables": {
      "factories": {
        "details": "Factory address to the specification of the factory including it's fee structure."
      },
      "factorySet": {
        "details": "An enumerable list of all registered factories."
      },
      "mainToken": {
        "details": "The main token most AMMs and pairs use, eg. WETH."
      },
      "pairInfo": {
        "details": "The token0 and token1 of the pair if the pair has been registered."
      },
      "routes": {
        "details": "For any registered from and to pair, provide a route used by the algorithm to execute the swap."
      },
      "tokenSwapType": {
        "details": "represents the swap type of the route from token0 to token1, for example TOKEN_TO_PAIR."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "convertERC20(address,address,address,uint256)": {
        "notice": "Swap `amount` of `fromToken` to `toToken` and send them to the recipient.The `fromToken` and `toToken` arguments can be AMM pairs.Requires `msg.sender` to be a Zap instance."
      },
      "factoryLength()": {
        "notice": "Returns the total number of registered factories."
      },
      "getFactory(uint256)": {
        "notice": "Gets a registered factory at a specific index, use factoryLength() for the upper bound."
      },
      "removeFactory(address)": {
        "notice": "Removes a factory from the list of registered factories."
      },
      "routeLength(address,address)": {
        "notice": "Returns the number of steps on the route from token0 to token1."
      },
      "setRoute(address,address,address[])": {
        "notice": "Generates and saves a route (and inverse of this route) based on the RouteSpec encoded `inputRoute`."
      }
    },
    "notice": "The ZapHandlerV1 is the first implementation of the Violin Zap protocol.It allows the owner to define routes that span over multiple uniswap factories.Furthermore, individual hops in the route can set the zero factory to indicate that this hop should be subroutes by an existing route in the handler.All though routes need to be added manually, swaps from token a to token b will create the route [a, main, b] if the main token is set.The ZapHandlerV1 supports token->token, pair->token and token->pair swaps.For pair->token swaps, the pair will first be burned and then two swaps to token are made.For token->pair swaps, two swaps to each subtoken are made and then the pair is minted.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5292,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5294,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 594,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3514,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "tokenSwapType",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)1247,t_mapping(t_contract(IERC20)1247,t_enum(SwapType)3504))"
      },
      {
        "astId": 3528,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "pairInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)1247,t_struct(PairInfo)3521_storage)"
      },
      {
        "astId": 3542,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "factorySet",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(AddressSet)2366_storage"
      },
      {
        "astId": 3548,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "factories",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Factory)3538_storage)"
      },
      {
        "astId": 3578,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "routes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_contract(IERC20)1247,t_mapping(t_contract(IERC20)1247,t_array(t_struct(RouteStep)3567_storage)dyn_storage))"
      },
      {
        "astId": 3582,
        "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
        "label": "mainToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)1247"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RouteStep)3567_storage)dyn_storage": {
        "base": "t_struct(RouteStep)3567_storage",
        "encoding": "dynamic_array",
        "label": "struct ZapHandlerV1.RouteStep[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1247": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)2958": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_enum(SwapType)3504": {
        "encoding": "inplace",
        "label": "enum ZapHandlerV1.SwapType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Factory)3538_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ZapHandlerV1.Factory)",
        "numberOfBytes": "32",
        "value": "t_struct(Factory)3538_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1247,t_array(t_struct(RouteStep)3567_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1247",
        "label": "mapping(contract IERC20 => struct ZapHandlerV1.RouteStep[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RouteStep)3567_storage)dyn_storage"
      },
      "t_mapping(t_contract(IERC20)1247,t_enum(SwapType)3504)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1247",
        "label": "mapping(contract IERC20 => enum ZapHandlerV1.SwapType)",
        "numberOfBytes": "32",
        "value": "t_enum(SwapType)3504"
      },
      "t_mapping(t_contract(IERC20)1247,t_mapping(t_contract(IERC20)1247,t_array(t_struct(RouteStep)3567_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1247",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct ZapHandlerV1.RouteStep[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1247,t_array(t_struct(RouteStep)3567_storage)dyn_storage)"
      },
      "t_mapping(t_contract(IERC20)1247,t_mapping(t_contract(IERC20)1247,t_enum(SwapType)3504))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1247",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => enum ZapHandlerV1.SwapType))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1247,t_enum(SwapType)3504)"
      },
      "t_mapping(t_contract(IERC20)1247,t_struct(PairInfo)3521_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1247",
        "label": "mapping(contract IERC20 => struct ZapHandlerV1.PairInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PairInfo)3521_storage"
      },
      "t_struct(AddressSet)2366_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2365,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2065_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Factory)3538_storage": {
        "encoding": "inplace",
        "label": "struct ZapHandlerV1.Factory",
        "members": [
          {
            "astId": 3531,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3534,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutNominator",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3537,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutDenominator",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PairInfo)3521_storage": {
        "encoding": "inplace",
        "label": "struct ZapHandlerV1.PairInfo",
        "members": [
          {
            "astId": 3517,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1247"
          },
          {
            "astId": 3520,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1247"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RouteStep)3567_storage": {
        "encoding": "inplace",
        "label": "struct ZapHandlerV1.RouteStep",
        "members": [
          {
            "astId": 3552,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1247"
          },
          {
            "astId": 3556,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1247"
          },
          {
            "astId": 3560,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "pair",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IUniswapV2Pair)2958"
          },
          {
            "astId": 3563,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutNominator",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 3566,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "amountsOutDenominator",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2065_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2060,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2064,
            "contract": "contracts/ZapHandlerV1.sol:ZapHandlerV1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}